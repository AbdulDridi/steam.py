# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_secrets.proto
# plugin: python-betterproto

from dataclasses import dataclass

import betterproto


class EKeyEscrowUsage(betterproto.Enum):
    k_EKeyEscrowUsageStreamingDevice = 0


@dataclass
class CKeyEscrow_Request(betterproto.Message):
    rsa_oaep_sha_ticket: bytes = betterproto.bytes_field(1)
    password: bytes = betterproto.bytes_field(2)
    usage: "EKeyEscrowUsage" = betterproto.enum_field(3)
    device_name: str = betterproto.string_field(4)


@dataclass
class CKeyEscrow_Ticket(betterproto.Message):
    password: bytes = betterproto.bytes_field(1)
    identifier: int = betterproto.uint64_field(2)
    payload: bytes = betterproto.bytes_field(3)
    timestamp: int = betterproto.uint32_field(4)
    usage: "EKeyEscrowUsage" = betterproto.enum_field(5)
    device_name: str = betterproto.string_field(6)
    device_model: str = betterproto.string_field(7)
    device_serial: str = betterproto.string_field(8)
    device_provisioning_id: int = betterproto.uint32_field(9)


@dataclass
class CKeyEscrow_Response(betterproto.Message):
    ticket: "CKeyEscrow_Ticket" = betterproto.message_field(1)


class SecretsStub(betterproto.ServiceStub):
    async def key_escrow(
        self,
        *,
        rsa_oaep_sha_ticket: bytes = b"",
        password: bytes = b"",
        usage: "EKeyEscrowUsage" = 0,
        device_name: str = "",
    ) -> CKeyEscrow_Response:
        request = CKeyEscrow_Request()
        request.rsa_oaep_sha_ticket = rsa_oaep_sha_ticket
        request.password = password
        request.usage = usage
        request.device_name = device_name

        return await self._unary_unary(
            "/.Secrets/KeyEscrow", request, CKeyEscrow_Response,
        )
