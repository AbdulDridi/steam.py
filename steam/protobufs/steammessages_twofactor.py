# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_twofactor.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List

import betterproto


@dataclass
class CTwoFactor_Status_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)


@dataclass
class CTwoFactor_Status_Response(betterproto.Message):
    state: int = betterproto.uint32_field(1)
    inactivation_reason: int = betterproto.uint32_field(2)
    authenticator_type: int = betterproto.uint32_field(3)
    authenticator_allowed: bool = betterproto.bool_field(4)
    steamguard_scheme: int = betterproto.uint32_field(5)
    token_gid: str = betterproto.string_field(6)
    email_validated: bool = betterproto.bool_field(7)
    device_identifier: str = betterproto.string_field(8)
    time_created: int = betterproto.uint32_field(9)
    revocation_attempts_remaining: int = betterproto.uint32_field(10)
    classified_agent: str = betterproto.string_field(11)
    allow_external_authenticator: bool = betterproto.bool_field(12)
    time_transferred: int = betterproto.uint32_field(13)


@dataclass
class CTwoFactor_AddAuthenticator_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    authenticator_time: int = betterproto.uint64_field(2)
    serial_number: float = betterproto.fixed64_field(3)
    authenticator_type: int = betterproto.uint32_field(4)
    device_identifier: str = betterproto.string_field(5)
    sms_phone_id: str = betterproto.string_field(6)
    http_headers: List[str] = betterproto.string_field(7)


@dataclass
class CTwoFactor_AddAuthenticator_Response(betterproto.Message):
    shared_secret: bytes = betterproto.bytes_field(1)
    serial_number: float = betterproto.fixed64_field(2)
    revocation_code: str = betterproto.string_field(3)
    uri: str = betterproto.string_field(4)
    server_time: int = betterproto.uint64_field(5)
    account_name: str = betterproto.string_field(6)
    token_gid: str = betterproto.string_field(7)
    identity_secret: bytes = betterproto.bytes_field(8)
    secret_1: bytes = betterproto.bytes_field(9)
    status: int = betterproto.int32_field(10)


@dataclass
class CTwoFactor_SendEmail_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    email_type: int = betterproto.uint32_field(2)
    include_activation_code: bool = betterproto.bool_field(3)


@dataclass
class CTwoFactor_SendEmail_Response(betterproto.Message):
    pass


@dataclass
class CTwoFactor_FinalizeAddAuthenticator_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    authenticator_code: str = betterproto.string_field(2)
    authenticator_time: int = betterproto.uint64_field(3)
    activation_code: str = betterproto.string_field(4)
    http_headers: List[str] = betterproto.string_field(5)


@dataclass
class CTwoFactor_FinalizeAddAuthenticator_Response(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    want_more: bool = betterproto.bool_field(2)
    server_time: int = betterproto.uint64_field(3)
    status: int = betterproto.int32_field(4)


@dataclass
class CTwoFactor_RemoveAuthenticator_Request(betterproto.Message):
    revocation_code: str = betterproto.string_field(2)
    revocation_reason: int = betterproto.uint32_field(5)
    steamguard_scheme: int = betterproto.uint32_field(6)
    remove_all_steamguard_cookies: bool = betterproto.bool_field(7)


@dataclass
class CTwoFactor_RemoveAuthenticator_Response(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    server_time: int = betterproto.uint64_field(3)
    revocation_attempts_remaining: int = betterproto.uint32_field(5)


@dataclass
class CTwoFactor_CreateEmergencyCodes_Request(betterproto.Message):
    code: str = betterproto.string_field(1)


@dataclass
class CTwoFactor_CreateEmergencyCodes_Response(betterproto.Message):
    codes: List[str] = betterproto.string_field(1)


@dataclass
class CTwoFactor_DestroyEmergencyCodes_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)


@dataclass
class CTwoFactor_DestroyEmergencyCodes_Response(betterproto.Message):
    pass


@dataclass
class CTwoFactor_ValidateToken_Request(betterproto.Message):
    code: str = betterproto.string_field(1)


@dataclass
class CTwoFactor_ValidateToken_Response(betterproto.Message):
    valid: bool = betterproto.bool_field(1)


class TwoFactorStub(betterproto.ServiceStub):
    async def query_status(self, *, steamid: float = 0) -> CTwoFactor_Status_Response:
        request = CTwoFactor_Status_Request()
        request.steamid = steamid

        return await self._unary_unary(
            "/.TwoFactor/QueryStatus", request, CTwoFactor_Status_Response,
        )

    async def add_authenticator(
        self,
        *,
        steamid: float = 0,
        authenticator_time: int = 0,
        serial_number: float = 0,
        authenticator_type: int = 0,
        device_identifier: str = "",
        sms_phone_id: str = "",
        http_headers: List[str] = [],
    ) -> CTwoFactor_AddAuthenticator_Response:
        request = CTwoFactor_AddAuthenticator_Request()
        request.steamid = steamid
        request.authenticator_time = authenticator_time
        request.serial_number = serial_number
        request.authenticator_type = authenticator_type
        request.device_identifier = device_identifier
        request.sms_phone_id = sms_phone_id
        request.http_headers = http_headers

        return await self._unary_unary(
            "/.TwoFactor/AddAuthenticator",
            request,
            CTwoFactor_AddAuthenticator_Response,
        )

    async def send_email(
        self,
        *,
        steamid: float = 0,
        email_type: int = 0,
        include_activation_code: bool = False,
    ) -> CTwoFactor_SendEmail_Response:
        request = CTwoFactor_SendEmail_Request()
        request.steamid = steamid
        request.email_type = email_type
        request.include_activation_code = include_activation_code

        return await self._unary_unary(
            "/.TwoFactor/SendEmail", request, CTwoFactor_SendEmail_Response,
        )

    async def finalize_add_authenticator(
        self,
        *,
        steamid: float = 0,
        authenticator_code: str = "",
        authenticator_time: int = 0,
        activation_code: str = "",
        http_headers: List[str] = [],
    ) -> CTwoFactor_FinalizeAddAuthenticator_Response:
        request = CTwoFactor_FinalizeAddAuthenticator_Request()
        request.steamid = steamid
        request.authenticator_code = authenticator_code
        request.authenticator_time = authenticator_time
        request.activation_code = activation_code
        request.http_headers = http_headers

        return await self._unary_unary(
            "/.TwoFactor/FinalizeAddAuthenticator",
            request,
            CTwoFactor_FinalizeAddAuthenticator_Response,
        )

    async def remove_authenticator(
        self,
        *,
        revocation_code: str = "",
        revocation_reason: int = 0,
        steamguard_scheme: int = 0,
        remove_all_steamguard_cookies: bool = False,
    ) -> CTwoFactor_RemoveAuthenticator_Response:
        request = CTwoFactor_RemoveAuthenticator_Request()
        request.revocation_code = revocation_code
        request.revocation_reason = revocation_reason
        request.steamguard_scheme = steamguard_scheme
        request.remove_all_steamguard_cookies = remove_all_steamguard_cookies

        return await self._unary_unary(
            "/.TwoFactor/RemoveAuthenticator",
            request,
            CTwoFactor_RemoveAuthenticator_Response,
        )

    async def create_emergency_codes(
        self, *, code: str = ""
    ) -> CTwoFactor_CreateEmergencyCodes_Response:
        request = CTwoFactor_CreateEmergencyCodes_Request()
        request.code = code

        return await self._unary_unary(
            "/.TwoFactor/CreateEmergencyCodes",
            request,
            CTwoFactor_CreateEmergencyCodes_Response,
        )

    async def destroy_emergency_codes(
        self, *, steamid: float = 0
    ) -> CTwoFactor_DestroyEmergencyCodes_Response:
        request = CTwoFactor_DestroyEmergencyCodes_Request()
        request.steamid = steamid

        return await self._unary_unary(
            "/.TwoFactor/DestroyEmergencyCodes",
            request,
            CTwoFactor_DestroyEmergencyCodes_Response,
        )

    async def validate_token(
        self, *, code: str = ""
    ) -> CTwoFactor_ValidateToken_Response:
        request = CTwoFactor_ValidateToken_Request()
        request.code = code

        return await self._unary_unary(
            "/.TwoFactor/ValidateToken", request, CTwoFactor_ValidateToken_Response,
        )
