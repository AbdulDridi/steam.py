# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_friendmessages.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List

import betterproto

from .steammessages_unified_base import NoResponse


@dataclass
class CFriendMessages_GetRecentMessages_Request(betterproto.Message):
    steamid1: float = betterproto.fixed64_field(1)
    steamid2: float = betterproto.fixed64_field(2)
    count: int = betterproto.uint32_field(3)
    most_recent_conversation: bool = betterproto.bool_field(4)
    rtime32_start_time: float = betterproto.fixed32_field(5)
    bbcode_format: bool = betterproto.bool_field(6)
    start_ordinal: int = betterproto.uint32_field(7)
    time_last: int = betterproto.uint32_field(8)
    ordinal_last: int = betterproto.uint32_field(9)


@dataclass
class CFriendMessages_GetRecentMessages_Response(betterproto.Message):
    messages: List[
        "CFriendMessages_GetRecentMessages_ResponseFriendMessage"
    ] = betterproto.message_field(1)
    more_available: bool = betterproto.bool_field(4)


@dataclass
class CFriendMessages_GetRecentMessages_ResponseFriendMessage(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    timestamp: int = betterproto.uint32_field(2)
    message: str = betterproto.string_field(3)
    ordinal: int = betterproto.uint32_field(4)


@dataclass
class CFriendsMessages_GetActiveMessageSessions_Request(betterproto.Message):
    lastmessage_since: int = betterproto.uint32_field(1)
    only_sessions_with_messages: bool = betterproto.bool_field(2)


@dataclass
class CFriendsMessages_GetActiveMessageSessions_Response(betterproto.Message):
    message_sessions: List[
        "CFriendsMessages_GetActiveMessageSessions_ResponseFriendMessageSession"
    ] = betterproto.message_field(1)
    timestamp: int = betterproto.uint32_field(2)


@dataclass
class CFriendsMessages_GetActiveMessageSessions_ResponseFriendMessageSession(
    betterproto.Message
):
    accountid_friend: int = betterproto.uint32_field(1)
    last_message: int = betterproto.uint32_field(2)
    last_view: int = betterproto.uint32_field(3)
    unread_message_count: int = betterproto.uint32_field(4)


@dataclass
class CFriendMessages_SendMessage_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    chat_entry_type: int = betterproto.int32_field(2)
    message: str = betterproto.string_field(3)
    contains_bbcode: bool = betterproto.bool_field(4)
    echo_to_sender: bool = betterproto.bool_field(5)
    low_priority: bool = betterproto.bool_field(6)
    client_message_id: str = betterproto.string_field(8)


@dataclass
class CFriendMessages_SendMessage_Response(betterproto.Message):
    modified_message: str = betterproto.string_field(1)
    server_timestamp: int = betterproto.uint32_field(2)
    ordinal: int = betterproto.uint32_field(3)
    message_without_bb_code: str = betterproto.string_field(4)


@dataclass
class CFriendMessages_AckMessage_Notification(betterproto.Message):
    steamid_partner: float = betterproto.fixed64_field(1)
    timestamp: int = betterproto.uint32_field(2)


@dataclass
class CFriendMessages_IsInFriendsUIBeta_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)


@dataclass
class CFriendMessages_IsInFriendsUIBeta_Response(betterproto.Message):
    online_in_friendsui: bool = betterproto.bool_field(1)
    has_used_friendsui: bool = betterproto.bool_field(2)


@dataclass
class CFriendMessages_IncomingMessage_Notification(betterproto.Message):
    steamid_friend: float = betterproto.fixed64_field(1)
    chat_entry_type: int = betterproto.int32_field(2)
    from_limited_account: bool = betterproto.bool_field(3)
    message: str = betterproto.string_field(4)
    rtime32_server_timestamp: float = betterproto.fixed32_field(5)
    ordinal: int = betterproto.uint32_field(6)
    local_echo: bool = betterproto.bool_field(7)
    message_no_bbcode: str = betterproto.string_field(8)
    low_priority: bool = betterproto.bool_field(9)


class FriendMessagesStub(betterproto.ServiceStub):
    async def get_recent_messages(
        self,
        *,
        steamid1: float = 0,
        steamid2: float = 0,
        count: int = 0,
        most_recent_conversation: bool = False,
        rtime32_start_time: float = 0,
        bbcode_format: bool = False,
        start_ordinal: int = 0,
        time_last: int = 0,
        ordinal_last: int = 0,
    ) -> CFriendMessages_GetRecentMessages_Response:
        request = CFriendMessages_GetRecentMessages_Request()
        request.steamid1 = steamid1
        request.steamid2 = steamid2
        request.count = count
        request.most_recent_conversation = most_recent_conversation
        request.rtime32_start_time = rtime32_start_time
        request.bbcode_format = bbcode_format
        request.start_ordinal = start_ordinal
        request.time_last = time_last
        request.ordinal_last = ordinal_last

        return await self._unary_unary(
            "/.FriendMessages/GetRecentMessages",
            request,
            CFriendMessages_GetRecentMessages_Response,
        )

    async def get_active_message_sessions(
        self, *, lastmessage_since: int = 0, only_sessions_with_messages: bool = False
    ) -> CFriendsMessages_GetActiveMessageSessions_Response:
        request = CFriendsMessages_GetActiveMessageSessions_Request()
        request.lastmessage_since = lastmessage_since
        request.only_sessions_with_messages = only_sessions_with_messages

        return await self._unary_unary(
            "/.FriendMessages/GetActiveMessageSessions",
            request,
            CFriendsMessages_GetActiveMessageSessions_Response,
        )

    async def send_message(
        self,
        *,
        steamid: float = 0,
        chat_entry_type: int = 0,
        message: str = "",
        contains_bbcode: bool = False,
        echo_to_sender: bool = False,
        low_priority: bool = False,
        client_message_id: str = "",
    ) -> CFriendMessages_SendMessage_Response:
        request = CFriendMessages_SendMessage_Request()
        request.steamid = steamid
        request.chat_entry_type = chat_entry_type
        request.message = message
        request.contains_bbcode = contains_bbcode
        request.echo_to_sender = echo_to_sender
        request.low_priority = low_priority
        request.client_message_id = client_message_id

        return await self._unary_unary(
            "/.FriendMessages/SendMessage",
            request,
            CFriendMessages_SendMessage_Response,
        )

    async def ack_message(
        self, *, steamid_partner: float = 0, timestamp: int = 0
    ) -> NoResponse:
        request = CFriendMessages_AckMessage_Notification()
        request.steamid_partner = steamid_partner
        request.timestamp = timestamp

        return await self._unary_unary(
            "/.FriendMessages/AckMessage", request, NoResponse,
        )

    async def is_in_friends_ui_beta(
        self, *, steamid: float = 0
    ) -> CFriendMessages_IsInFriendsUIBeta_Response:
        request = CFriendMessages_IsInFriendsUIBeta_Request()
        request.steamid = steamid

        return await self._unary_unary(
            "/.FriendMessages/IsInFriendsUIBeta",
            request,
            CFriendMessages_IsInFriendsUIBeta_Response,
        )


class FriendMessagesClientStub(betterproto.ServiceStub):
    async def incoming_message(
        self,
        *,
        steamid_friend: float = 0,
        chat_entry_type: int = 0,
        from_limited_account: bool = False,
        message: str = "",
        rtime32_server_timestamp: float = 0,
        ordinal: int = 0,
        local_echo: bool = False,
        message_no_bbcode: str = "",
        low_priority: bool = False,
    ) -> NoResponse:
        request = CFriendMessages_IncomingMessage_Notification()
        request.steamid_friend = steamid_friend
        request.chat_entry_type = chat_entry_type
        request.from_limited_account = from_limited_account
        request.message = message
        request.rtime32_server_timestamp = rtime32_server_timestamp
        request.ordinal = ordinal
        request.local_echo = local_echo
        request.message_no_bbcode = message_no_bbcode
        request.low_priority = low_priority

        return await self._unary_unary(
            "/.FriendMessagesClient/IncomingMessage", request, NoResponse,
        )

    async def notify_ack_message_echo(
        self, *, steamid_partner: float = 0, timestamp: int = 0
    ) -> NoResponse:
        request = CFriendMessages_AckMessage_Notification()
        request.steamid_partner = steamid_partner
        request.timestamp = timestamp

        return await self._unary_unary(
            "/.FriendMessagesClient/NotifyAckMessageEcho", request, NoResponse,
        )
