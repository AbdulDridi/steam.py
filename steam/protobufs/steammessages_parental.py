# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_parental.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List, Optional

import betterproto

from .steammessages_unified_base import NoResponse


@dataclass
class ParentalApp(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    is_allowed: bool = betterproto.bool_field(2)


@dataclass
class ParentalSettings(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    applist_base_id: int = betterproto.uint32_field(2)
    applist_base_description: str = betterproto.string_field(3)
    applist_base: List["ParentalApp"] = betterproto.message_field(4)
    applist_custom: List["ParentalApp"] = betterproto.message_field(5)
    passwordhashtype: int = betterproto.uint32_field(6)
    salt: bytes = betterproto.bytes_field(7)
    passwordhash: bytes = betterproto.bytes_field(8)
    is_enabled: bool = betterproto.bool_field(9)
    enabled_features: int = betterproto.uint32_field(10)
    recovery_email: str = betterproto.string_field(11)
    is_site_license_lock: bool = betterproto.bool_field(12)


@dataclass
class CParental_EnableParentalSettings_Request(betterproto.Message):
    password: str = betterproto.string_field(1)
    settings: "ParentalSettings" = betterproto.message_field(2)
    sessionid: str = betterproto.string_field(3)
    enablecode: int = betterproto.uint32_field(4)
    steamid: float = betterproto.fixed64_field(10)


@dataclass
class CParental_EnableParentalSettings_Response(betterproto.Message):
    pass


@dataclass
class CParental_DisableParentalSettings_Request(betterproto.Message):
    password: str = betterproto.string_field(1)
    steamid: float = betterproto.fixed64_field(10)


@dataclass
class CParental_DisableParentalSettings_Response(betterproto.Message):
    pass


@dataclass
class CParental_GetParentalSettings_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(10)


@dataclass
class CParental_GetParentalSettings_Response(betterproto.Message):
    settings: "ParentalSettings" = betterproto.message_field(1)


@dataclass
class CParental_GetSignedParentalSettings_Request(betterproto.Message):
    priority: int = betterproto.uint32_field(1)


@dataclass
class CParental_GetSignedParentalSettings_Response(betterproto.Message):
    serialized_settings: bytes = betterproto.bytes_field(1)
    signature: bytes = betterproto.bytes_field(2)


@dataclass
class CParental_SetParentalSettings_Request(betterproto.Message):
    password: str = betterproto.string_field(1)
    settings: "ParentalSettings" = betterproto.message_field(2)
    new_password: str = betterproto.string_field(3)
    sessionid: str = betterproto.string_field(4)
    steamid: float = betterproto.fixed64_field(10)


@dataclass
class CParental_SetParentalSettings_Response(betterproto.Message):
    pass


@dataclass
class CParental_ValidateToken_Request(betterproto.Message):
    unlock_token: str = betterproto.string_field(1)


@dataclass
class CParental_ValidateToken_Response(betterproto.Message):
    pass


@dataclass
class CParental_ValidatePassword_Request(betterproto.Message):
    password: str = betterproto.string_field(1)
    session: str = betterproto.string_field(2)
    send_unlock_on_success: bool = betterproto.bool_field(3)


@dataclass
class CParental_ValidatePassword_Response(betterproto.Message):
    token: str = betterproto.string_field(1)


@dataclass
class CParental_LockClient_Request(betterproto.Message):
    session: str = betterproto.string_field(1)


@dataclass
class CParental_LockClient_Response(betterproto.Message):
    pass


@dataclass
class CParental_RequestRecoveryCode_Request(betterproto.Message):
    pass


@dataclass
class CParental_RequestRecoveryCode_Response(betterproto.Message):
    pass


@dataclass
class CParental_DisableWithRecoveryCode_Request(betterproto.Message):
    recovery_code: int = betterproto.uint32_field(1)
    steamid: float = betterproto.fixed64_field(10)


@dataclass
class CParental_DisableWithRecoveryCode_Response(betterproto.Message):
    pass


@dataclass
class CParental_ParentalSettingsChange_Notification(betterproto.Message):
    serialized_settings: bytes = betterproto.bytes_field(1)
    signature: bytes = betterproto.bytes_field(2)
    password: str = betterproto.string_field(3)
    sessionid: str = betterproto.string_field(4)


@dataclass
class CParental_ParentalUnlock_Notification(betterproto.Message):
    password: str = betterproto.string_field(1)
    sessionid: str = betterproto.string_field(2)


@dataclass
class CParental_ParentalLock_Notification(betterproto.Message):
    sessionid: str = betterproto.string_field(1)


class ParentalStub(betterproto.ServiceStub):
    async def enable_parental_settings(
        self,
        *,
        password: str = "",
        settings: Optional["ParentalSettings"] = None,
        sessionid: str = "",
        enablecode: int = 0,
        steamid: float = 0,
    ) -> CParental_EnableParentalSettings_Response:
        request = CParental_EnableParentalSettings_Request()
        request.password = password
        if settings is not None:
            request.settings = settings
        request.sessionid = sessionid
        request.enablecode = enablecode
        request.steamid = steamid

        return await self._unary_unary(
            "/.Parental/EnableParentalSettings",
            request,
            CParental_EnableParentalSettings_Response,
        )

    async def disable_parental_settings(
        self, *, password: str = "", steamid: float = 0
    ) -> CParental_DisableParentalSettings_Response:
        request = CParental_DisableParentalSettings_Request()
        request.password = password
        request.steamid = steamid

        return await self._unary_unary(
            "/.Parental/DisableParentalSettings",
            request,
            CParental_DisableParentalSettings_Response,
        )

    async def get_parental_settings(
        self, *, steamid: float = 0
    ) -> CParental_GetParentalSettings_Response:
        request = CParental_GetParentalSettings_Request()
        request.steamid = steamid

        return await self._unary_unary(
            "/.Parental/GetParentalSettings",
            request,
            CParental_GetParentalSettings_Response,
        )

    async def get_signed_parental_settings(
        self, *, priority: int = 0
    ) -> CParental_GetSignedParentalSettings_Response:
        request = CParental_GetSignedParentalSettings_Request()
        request.priority = priority

        return await self._unary_unary(
            "/.Parental/GetSignedParentalSettings",
            request,
            CParental_GetSignedParentalSettings_Response,
        )

    async def set_parental_settings(
        self,
        *,
        password: str = "",
        settings: Optional["ParentalSettings"] = None,
        new_password: str = "",
        sessionid: str = "",
        steamid: float = 0,
    ) -> CParental_SetParentalSettings_Response:
        request = CParental_SetParentalSettings_Request()
        request.password = password
        if settings is not None:
            request.settings = settings
        request.new_password = new_password
        request.sessionid = sessionid
        request.steamid = steamid

        return await self._unary_unary(
            "/.Parental/SetParentalSettings",
            request,
            CParental_SetParentalSettings_Response,
        )

    async def validate_token(
        self, *, unlock_token: str = ""
    ) -> CParental_ValidateToken_Response:
        request = CParental_ValidateToken_Request()
        request.unlock_token = unlock_token

        return await self._unary_unary(
            "/.Parental/ValidateToken", request, CParental_ValidateToken_Response,
        )

    async def validate_password(
        self,
        *,
        password: str = "",
        session: str = "",
        send_unlock_on_success: bool = False,
    ) -> CParental_ValidatePassword_Response:
        request = CParental_ValidatePassword_Request()
        request.password = password
        request.session = session
        request.send_unlock_on_success = send_unlock_on_success

        return await self._unary_unary(
            "/.Parental/ValidatePassword", request, CParental_ValidatePassword_Response,
        )

    async def lock_client(self, *, session: str = "") -> CParental_LockClient_Response:
        request = CParental_LockClient_Request()
        request.session = session

        return await self._unary_unary(
            "/.Parental/LockClient", request, CParental_LockClient_Response,
        )

    async def request_recovery_code(self) -> CParental_RequestRecoveryCode_Response:
        request = CParental_RequestRecoveryCode_Request()

        return await self._unary_unary(
            "/.Parental/RequestRecoveryCode",
            request,
            CParental_RequestRecoveryCode_Response,
        )

    async def disable_with_recovery_code(
        self, *, recovery_code: int = 0, steamid: float = 0
    ) -> CParental_DisableWithRecoveryCode_Response:
        request = CParental_DisableWithRecoveryCode_Request()
        request.recovery_code = recovery_code
        request.steamid = steamid

        return await self._unary_unary(
            "/.Parental/DisableWithRecoveryCode",
            request,
            CParental_DisableWithRecoveryCode_Response,
        )


class ParentalClientStub(betterproto.ServiceStub):
    async def notify_settings_change(
        self,
        *,
        serialized_settings: bytes = b"",
        signature: bytes = b"",
        password: str = "",
        sessionid: str = "",
    ) -> NoResponse:
        request = CParental_ParentalSettingsChange_Notification()
        request.serialized_settings = serialized_settings
        request.signature = signature
        request.password = password
        request.sessionid = sessionid

        return await self._unary_unary(
            "/.ParentalClient/NotifySettingsChange", request, NoResponse,
        )

    async def notify_unlock(
        self, *, password: str = "", sessionid: str = ""
    ) -> NoResponse:
        request = CParental_ParentalUnlock_Notification()
        request.password = password
        request.sessionid = sessionid

        return await self._unary_unary(
            "/.ParentalClient/NotifyUnlock", request, NoResponse,
        )

    async def notify_lock(self, *, sessionid: str = "") -> NoResponse:
        request = CParental_ParentalLock_Notification()
        request.sessionid = sessionid

        return await self._unary_unary(
            "/.ParentalClient/NotifyLock", request, NoResponse,
        )
