# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_chat.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List, Optional

import betterproto

from .steammessages_unified_base import NoResponse


class EChatRoomJoinState(betterproto.Enum):
    k_EChatRoomJoinState_Default = 0
    k_EChatRoomJoinState_None = 1
    k_EChatRoomJoinState_Joined = 2
    k_EChatRoomJoinState_TestInvalid = 99


class EChatRoomGroupRank(betterproto.Enum):
    k_EChatRoomGroupRank_Default = 0
    k_EChatRoomGroupRank_Viewer = 10
    k_EChatRoomGroupRank_Guest = 15
    k_EChatRoomGroupRank_Member = 20
    k_EChatRoomGroupRank_Moderator = 30
    k_EChatRoomGroupRank_Officer = 40
    k_EChatRoomGroupRank_Owner = 50
    k_EChatRoomGroupRank_TestInvalid = 99


class EChatRoomNotificationLevel(betterproto.Enum):
    k_EChatroomNotificationLevel_Invalid = 0
    k_EChatroomNotificationLevel_None = 1
    k_EChatroomNotificationLevel_MentionMe = 2
    k_EChatroomNotificationLevel_MentionAll = 3
    k_EChatroomNotificationLevel_AllMessages = 4


class EChatRoomServerMessage(betterproto.Enum):
    k_EChatRoomServerMsg_Invalid = 0
    k_EChatRoomServerMsg_RenameChatRoom = 1
    k_EChatRoomServerMsg_Joined = 2
    k_EChatRoomServerMsg_Parted = 3
    k_EChatRoomServerMsg_Kicked = 4
    k_EChatRoomServerMsg_Invited = 5
    k_EChatRoomServerMsg_InviteDismissed = 8
    k_EChatRoomServerMsg_ChatRoomTaglineChanged = 9
    k_EChatRoomServerMsg_ChatRoomAvatarChanged = 10
    k_EChatRoomServerMsg_AppCustom = 11


class EChatRoomMemberStateChange(betterproto.Enum):
    k_EChatRoomMemberStateChange_Invalid = 0
    k_EChatRoomMemberStateChange_Joined = 1
    k_EChatRoomMemberStateChange_Parted = 2
    k_EChatRoomMemberStateChange_Kicked = 3
    k_EChatRoomMemberStateChange_Invited = 4
    k_EChatRoomMemberStateChange_RankChanged = 7
    k_EChatRoomMemberStateChange_InviteDismissed = 8
    k_EChatRoomMemberStateChange_Muted = 9
    k_EChatRoomMemberStateChange_Banned = 10
    k_EChatRoomMemberStateChange_RolesChanged = 12


@dataclass
class CChat_RequestFriendPersonaStates_Request(betterproto.Message):
    pass


@dataclass
class CChat_RequestFriendPersonaStates_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_CreateChatRoomGroup_Request(betterproto.Message):
    steamid_partner: float = betterproto.fixed64_field(1)
    steamid_invited: float = betterproto.fixed64_field(2)
    name: str = betterproto.string_field(3)
    steamid_invitees: List[float] = betterproto.fixed64_field(4)
    watching_broadcast_accountid: int = betterproto.uint32_field(6)
    watching_broadcast_channel_id: int = betterproto.uint64_field(7)


@dataclass
class CChatRole(betterproto.Message):
    role_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)
    ordinal: int = betterproto.uint32_field(3)


@dataclass
class CChatRoleActions(betterproto.Message):
    role_id: int = betterproto.uint64_field(1)
    can_create_rename_delete_channel: bool = betterproto.bool_field(2)
    can_kick: bool = betterproto.bool_field(3)
    can_ban: bool = betterproto.bool_field(4)
    can_invite: bool = betterproto.bool_field(5)
    can_change_tagline_avatar_name: bool = betterproto.bool_field(6)
    can_chat: bool = betterproto.bool_field(7)
    can_view_history: bool = betterproto.bool_field(8)
    can_change_group_roles: bool = betterproto.bool_field(9)
    can_change_user_roles: bool = betterproto.bool_field(10)
    can_mention_all: bool = betterproto.bool_field(11)
    can_set_watching_broadcast: bool = betterproto.bool_field(12)


@dataclass
class CChatPartyBeacon(betterproto.Message):
    app_id: int = betterproto.uint32_field(1)
    steamid_owner: float = betterproto.fixed64_field(2)
    beacon_id: float = betterproto.fixed64_field(3)
    game_metadata: str = betterproto.string_field(4)


@dataclass
class CChatRoomGroupHeaderState(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_name: str = betterproto.string_field(2)
    clanid: int = betterproto.uint32_field(13)
    accountid_owner: int = betterproto.uint32_field(14)
    appid: int = betterproto.uint32_field(21)
    tagline: str = betterproto.string_field(15)
    avatar_sha: bytes = betterproto.bytes_field(16)
    default_role_id: int = betterproto.uint64_field(17)
    roles: List["CChatRole"] = betterproto.message_field(18)
    role_actions: List["CChatRoleActions"] = betterproto.message_field(19)
    watching_broadcast_accountid: int = betterproto.uint32_field(20)
    party_beacons: List["CChatPartyBeacon"] = betterproto.message_field(22)
    watching_broadcast_channel_id: int = betterproto.uint64_field(23)
    active_minigame_id: int = betterproto.uint64_field(24)


@dataclass
class CChatRoomMember(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    state: "EChatRoomJoinState" = betterproto.enum_field(3)
    rank: "EChatRoomGroupRank" = betterproto.enum_field(4)
    time_kick_expire: int = betterproto.uint32_field(6)
    role_ids: List[int] = betterproto.uint64_field(7)


@dataclass
class CChatRoomState(betterproto.Message):
    chat_id: int = betterproto.uint64_field(1)
    chat_name: str = betterproto.string_field(2)
    voice_allowed: bool = betterproto.bool_field(3)
    members_in_voice: List[int] = betterproto.uint32_field(4)
    time_last_message: int = betterproto.uint32_field(5)
    sort_order: int = betterproto.uint32_field(6)
    last_message: str = betterproto.string_field(7)
    accountid_last_message: int = betterproto.uint32_field(8)


@dataclass
class CChatRoomGroupState(betterproto.Message):
    header_state: "CChatRoomGroupHeaderState" = betterproto.message_field(1)
    members: List["CChatRoomMember"] = betterproto.message_field(2)
    default_chat_id: int = betterproto.uint64_field(4)
    chat_rooms: List["CChatRoomState"] = betterproto.message_field(5)
    kicked: List["CChatRoomMember"] = betterproto.message_field(7)


@dataclass
class CUserChatRoomState(betterproto.Message):
    chat_id: int = betterproto.uint64_field(1)
    time_joined: int = betterproto.uint32_field(2)
    time_last_ack: int = betterproto.uint32_field(3)
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(4)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(5)
    time_last_mention: int = betterproto.uint32_field(6)
    unread_indicator_muted: bool = betterproto.bool_field(7)
    time_first_unread: int = betterproto.uint32_field(8)


@dataclass
class CUserChatRoomGroupState(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    time_joined: int = betterproto.uint32_field(2)
    user_chat_room_state: List["CUserChatRoomState"] = betterproto.message_field(3)
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(4)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(5)
    time_last_group_ack: int = betterproto.uint32_field(6)
    unread_indicator_muted: bool = betterproto.bool_field(7)


@dataclass
class CChatRoom_CreateChatRoomGroup_Response(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    state: "CChatRoomGroupState" = betterproto.message_field(2)
    user_chat_state: "CUserChatRoomGroupState" = betterproto.message_field(3)


@dataclass
class CChatRoom_SaveChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)


@dataclass
class CChatRoom_SaveChatRoomGroup_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_RenameChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)


@dataclass
class CChatRoom_RenameChatRoomGroup_Response(betterproto.Message):
    name: str = betterproto.string_field(1)


@dataclass
class CChatRoom_SetChatRoomGroupTagline_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    tagline: str = betterproto.string_field(2)


@dataclass
class CChatRoom_SetChatRoomGroupTagline_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_SetChatRoomGroupAvatar_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    avatar_sha: bytes = betterproto.bytes_field(2)


@dataclass
class CChatRoom_SetChatRoomGroupAvatar_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_SetChatRoomGroupWatchingBroadcast_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    watching_broadcast_accountid: int = betterproto.uint32_field(2)
    watching_broadcast_channel_id: int = betterproto.uint64_field(3)


@dataclass
class CChatRoom_SetChatRoomGroupWatchingBroadcast_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_JoinMiniGameForChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass
class CChatRoom_JoinMiniGameForChatRoomGroup_Response(betterproto.Message):
    minigame_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_EndMiniGameForChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    minigame_id: int = betterproto.uint64_field(3)


@dataclass
class CChatRoom_EndMiniGameForChatRoomGroup_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_MuteUser_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: float = betterproto.fixed64_field(2)
    expiration: int = betterproto.int32_field(3)


@dataclass
class CChatRoom_MuteUser_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_KickUser_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: float = betterproto.fixed64_field(2)
    expiration: int = betterproto.int32_field(3)


@dataclass
class CChatRoom_KickUser_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_SetUserBanState_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: float = betterproto.fixed64_field(2)
    ban_state: bool = betterproto.bool_field(3)


@dataclass
class CChatRoom_SetUserBanState_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_RevokeInvite_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: float = betterproto.fixed64_field(2)


@dataclass
class CChatRoom_RevokeInvite_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_CreateRole_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)


@dataclass
class CChatRoom_CreateRole_Response(betterproto.Message):
    actions: "CChatRoleActions" = betterproto.message_field(2)


@dataclass
class CChatRoom_GetRoles_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_GetRoles_Response(betterproto.Message):
    roles: List["CChatRole"] = betterproto.message_field(1)


@dataclass
class CChatRoom_RenameRole_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)
    name: str = betterproto.string_field(3)


@dataclass
class CChatRoom_RenameRole_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_ReorderRole_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)
    ordinal: int = betterproto.uint32_field(3)


@dataclass
class CChatRoom_ReorderRole_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_DeleteRole_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)


@dataclass
class CChatRoom_DeleteRole_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_GetRoleActions_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)


@dataclass
class CChatRoom_GetRoleActions_Response(betterproto.Message):
    actions: List["CChatRoleActions"] = betterproto.message_field(1)


@dataclass
class CChatRoom_ReplaceRoleActions_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(2)
    actions: "CChatRoleActions" = betterproto.message_field(4)


@dataclass
class CChatRoom_ReplaceRoleActions_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_AddRoleToUser_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(3)
    steamid: float = betterproto.fixed64_field(4)


@dataclass
class CChatRoom_AddRoleToUser_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_GetRolesForUser_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: float = betterproto.fixed64_field(3)


@dataclass
class CChatRoom_GetRolesForUser_Response(betterproto.Message):
    role_ids: List[int] = betterproto.uint64_field(1)


@dataclass
class CChatRoom_DeleteRoleFromUser_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    role_id: int = betterproto.uint64_field(3)
    steamid: float = betterproto.fixed64_field(4)


@dataclass
class CChatRoom_DeleteRoleFromUser_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_JoinChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    invite_code: str = betterproto.string_field(2)
    chat_id: int = betterproto.uint64_field(3)


@dataclass
class CChatRoom_JoinChatRoomGroup_Response(betterproto.Message):
    state: "CChatRoomGroupState" = betterproto.message_field(1)
    user_chat_state: "CUserChatRoomGroupState" = betterproto.message_field(3)
    join_chat_id: int = betterproto.uint64_field(4)
    time_expire: int = betterproto.uint32_field(5)


@dataclass
class CChatRoom_InviteFriendToChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    steamid: float = betterproto.fixed64_field(2)
    chat_id: int = betterproto.uint64_field(3)
    skip_friendsui_check: bool = betterproto.bool_field(4)


@dataclass
class CChatRoom_InviteFriendToChatRoomGroup_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_LeaveChatRoomGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_LeaveChatRoomGroup_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_CreateChatRoom_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    name: str = betterproto.string_field(2)
    allow_voice: bool = betterproto.bool_field(3)


@dataclass
class CChatRoom_CreateChatRoom_Response(betterproto.Message):
    chat_room: "CChatRoomState" = betterproto.message_field(1)


@dataclass
class CChatRoom_DeleteChatRoom_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass
class CChatRoom_DeleteChatRoom_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_RenameChatRoom_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    name: str = betterproto.string_field(3)


@dataclass
class CChatRoom_RenameChatRoom_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_ReorderChatRoom_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    move_after_chat_id: int = betterproto.uint64_field(3)


@dataclass
class CChatRoom_ReorderChatRoom_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_SendChatMessage_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    message: str = betterproto.string_field(3)
    echo_to_sender: bool = betterproto.bool_field(4)


@dataclass
class CChatRoom_SendChatMessage_Response(betterproto.Message):
    modified_message: str = betterproto.string_field(1)
    server_timestamp: int = betterproto.uint32_field(2)
    ordinal: int = betterproto.uint32_field(3)
    message_without_bb_code: str = betterproto.string_field(4)


@dataclass
class CChatRoom_JoinVoiceChat_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass
class CChatRoom_JoinVoiceChat_Response(betterproto.Message):
    voice_chatid: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_LeaveVoiceChat_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)


@dataclass
class CChatRoom_LeaveVoiceChat_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_GetMessageHistory_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    last_time: int = betterproto.uint32_field(3)
    last_ordinal: int = betterproto.uint32_field(4)
    start_time: int = betterproto.uint32_field(5)
    start_ordinal: int = betterproto.uint32_field(6)
    max_count: int = betterproto.uint32_field(7)


@dataclass
class ServerMessage(betterproto.Message):
    message: "EChatRoomServerMessage" = betterproto.enum_field(1)
    string_param: str = betterproto.string_field(2)
    accountid_param: int = betterproto.uint32_field(3)


@dataclass
class CChatRoom_GetMessageHistory_Response(betterproto.Message):
    messages: List[
        "CChatRoom_GetMessageHistory_ResponseChatMessage"
    ] = betterproto.message_field(1)
    more_available: bool = betterproto.bool_field(4)


@dataclass
class CChatRoom_GetMessageHistory_ResponseChatMessage(betterproto.Message):
    sender: int = betterproto.uint32_field(1)
    server_timestamp: int = betterproto.uint32_field(2)
    message: str = betterproto.string_field(3)
    ordinal: int = betterproto.uint32_field(4)
    server_message: "ServerMessage" = betterproto.message_field(5)
    deleted: bool = betterproto.bool_field(6)


@dataclass
class CChatRoom_GetMyChatRoomGroups_Request(betterproto.Message):
    pass


@dataclass
class CChatRoom_GetChatRoomGroupSummary_Response(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_group_name: str = betterproto.string_field(2)
    active_member_count: int = betterproto.uint32_field(3)
    active_voice_member_count: int = betterproto.uint32_field(4)
    default_chat_id: int = betterproto.uint64_field(5)
    chat_rooms: List["CChatRoomState"] = betterproto.message_field(6)
    clanid: int = betterproto.uint32_field(7)
    chat_group_tagline: str = betterproto.string_field(8)
    accountid_owner: int = betterproto.uint32_field(9)
    top_members: List[int] = betterproto.uint32_field(10)
    chat_group_avatar_sha: bytes = betterproto.bytes_field(11)
    rank: "EChatRoomGroupRank" = betterproto.enum_field(12)
    default_role_id: int = betterproto.uint64_field(13)
    role_ids: List[int] = betterproto.uint64_field(14)
    role_actions: List["CChatRoleActions"] = betterproto.message_field(15)
    watching_broadcast_accountid: int = betterproto.uint32_field(16)
    appid: int = betterproto.uint32_field(17)
    party_beacons: List["CChatPartyBeacon"] = betterproto.message_field(18)
    watching_broadcast_channel_id: int = betterproto.uint64_field(19)
    active_minigame_id: int = betterproto.uint64_field(20)


@dataclass
class CChatRoomSummaryPair(betterproto.Message):
    user_chat_group_state: "CUserChatRoomGroupState" = betterproto.message_field(1)
    group_summary: "CChatRoom_GetChatRoomGroupSummary_Response" = betterproto.message_field(
        2
    )


@dataclass
class CChatRoom_GetMyChatRoomGroups_Response(betterproto.Message):
    chat_room_groups: List["CChatRoomSummaryPair"] = betterproto.message_field(1)


@dataclass
class CChatRoom_GetChatRoomGroupState_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_GetChatRoomGroupState_Response(betterproto.Message):
    state: "CChatRoomGroupState" = betterproto.message_field(1)


@dataclass
class CChatRoom_GetChatRoomGroupSummary_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_AckChatMessage_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    timestamp: int = betterproto.uint32_field(3)


@dataclass
class CChatRoom_CreateInviteLink_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    seconds_valid: int = betterproto.uint32_field(2)
    chat_id: int = betterproto.uint64_field(3)


@dataclass
class CChatRoom_CreateInviteLink_Response(betterproto.Message):
    invite_code: str = betterproto.string_field(1)
    seconds_valid: int = betterproto.uint32_field(2)


@dataclass
class CChatRoom_GetInviteLinkInfo_Request(betterproto.Message):
    invite_code: str = betterproto.string_field(1)


@dataclass
class CChatRoom_GetInviteLinkInfo_Response(betterproto.Message):
    steamid_sender: float = betterproto.fixed64_field(3)
    time_expires: int = betterproto.uint32_field(4)
    chat_id: int = betterproto.uint64_field(6)
    group_summary: "CChatRoom_GetChatRoomGroupSummary_Response" = betterproto.message_field(
        8
    )
    user_chat_group_state: "CUserChatRoomGroupState" = betterproto.message_field(9)
    time_kick_expire: int = betterproto.uint32_field(10)
    banned: bool = betterproto.bool_field(11)


@dataclass
class CChatRoom_GetInviteInfo_Request(betterproto.Message):
    steamid_invitee: float = betterproto.fixed64_field(1)
    chat_group_id: int = betterproto.uint64_field(2)
    chat_id: int = betterproto.uint64_field(3)
    invite_code: str = betterproto.string_field(4)


@dataclass
class CChatRoom_GetInviteInfo_Response(betterproto.Message):
    group_summary: "CChatRoom_GetChatRoomGroupSummary_Response" = betterproto.message_field(
        1
    )
    time_kick_expire: int = betterproto.uint32_field(2)
    banned: bool = betterproto.bool_field(3)


@dataclass
class CChatRoom_GetInviteLinksForGroup_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_GetInviteLinksForGroup_Response(betterproto.Message):
    invite_links: List[
        "CChatRoom_GetInviteLinksForGroup_ResponseLinkInfo"
    ] = betterproto.message_field(1)


@dataclass
class CChatRoom_GetInviteLinksForGroup_ResponseLinkInfo(betterproto.Message):
    invite_code: str = betterproto.string_field(1)
    steamid_creator: float = betterproto.fixed64_field(2)
    time_expires: int = betterproto.uint32_field(3)
    chat_id: int = betterproto.uint64_field(4)


@dataclass
class CChatRoom_GetBanList_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoom_GetBanList_Response(betterproto.Message):
    bans: List["CChatRoom_GetBanList_ResponseBanInfo"] = betterproto.message_field(1)


@dataclass
class CChatRoom_GetBanList_ResponseBanInfo(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    accountid_actor: int = betterproto.uint32_field(2)
    time_banned: int = betterproto.uint32_field(3)
    ban_reason: str = betterproto.string_field(4)


@dataclass
class CChatRoom_GetInviteList_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)


@dataclass
class CChatRoomGroupInvite(betterproto.Message):
    accountid: int = betterproto.uint32_field(1)
    accountid_actor: int = betterproto.uint32_field(2)
    time_invited: int = betterproto.uint32_field(3)


@dataclass
class CChatRoom_GetInviteList_Response(betterproto.Message):
    invites: List["CChatRoomGroupInvite"] = betterproto.message_field(1)


@dataclass
class CChatRoom_DeleteInviteLink_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    invite_code: str = betterproto.string_field(2)


@dataclass
class CChatRoom_DeleteInviteLink_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_SetSessionActiveChatRoomGroups_Request(betterproto.Message):
    chat_group_ids: List[int] = betterproto.uint64_field(1)
    chat_groups_data_requested: List[int] = betterproto.uint64_field(2)
    virtualize_members_threshold: int = betterproto.int32_field(3)


@dataclass
class CChatRoom_SetSessionActiveChatRoomGroups_Response(betterproto.Message):
    chat_states: List["CChatRoomGroupState"] = betterproto.message_field(1)
    virtualize_members_chat_group_ids: List[int] = betterproto.uint64_field(2)


@dataclass
class CChatRoom_SetUserChatGroupPreferences_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_group_preferences: "CChatRoom_SetUserChatGroupPreferences_RequestChatGroupPreferences" = betterproto.message_field(
        2
    )
    chat_room_preferences: List[
        "CChatRoom_SetUserChatGroupPreferences_RequestChatRoomPreferences"
    ] = betterproto.message_field(3)


@dataclass
class CChatRoom_SetUserChatGroupPreferences_RequestChatGroupPreferences(
    betterproto.Message
):
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(1)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(2)
    unread_indicator_muted: bool = betterproto.bool_field(3)


@dataclass
class CChatRoom_SetUserChatGroupPreferences_RequestChatRoomPreferences(
    betterproto.Message
):
    chat_id: int = betterproto.uint64_field(1)
    desktop_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(2)
    mobile_notification_level: "EChatRoomNotificationLevel" = betterproto.enum_field(3)
    unread_indicator_muted: bool = betterproto.bool_field(4)


@dataclass
class CChatRoom_SetUserChatGroupPreferences_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_DeleteChatMessages_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    messages: List[
        "CChatRoom_DeleteChatMessages_RequestMessage"
    ] = betterproto.message_field(3)


@dataclass
class CChatRoom_DeleteChatMessages_RequestMessage(betterproto.Message):
    server_timestamp: int = betterproto.uint32_field(1)
    ordinal: int = betterproto.uint32_field(2)


@dataclass
class CChatRoom_DeleteChatMessages_Response(betterproto.Message):
    pass


@dataclass
class CChatRoom_UpdateMemberListView_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    view_id: int = betterproto.uint64_field(2)
    start: int = betterproto.int32_field(3)
    end: int = betterproto.int32_field(4)
    client_changenumber: int = betterproto.int32_field(5)
    delete_view: bool = betterproto.bool_field(6)
    persona_subscribe_accountids: List[int] = betterproto.int32_field(7)
    persona_unsubscribe_accountids: List[int] = betterproto.int32_field(8)


@dataclass
class CChatRoom_SearchMembers_Request(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    search_id: int = betterproto.uint64_field(2)
    search_text: str = betterproto.string_field(3)
    max_results: int = betterproto.int32_field(4)


@dataclass
class CChatRoom_SearchMembers_Response(betterproto.Message):
    matching_members: List[
        "CChatRoom_SearchMembers_ResponseMemberMatch"
    ] = betterproto.message_field(1)
    status_flags: int = betterproto.uint32_field(2)


@dataclass
class CChatRoom_SearchMembers_ResponseMemberMatch(betterproto.Message):
    accountid: int = betterproto.int32_field(1)
    persona: "CMsgClientPersonaStateFriend" = betterproto.message_field(2)


@dataclass
class CClanChatRooms_GetClanChatRoomInfo_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    autocreate: bool = betterproto.bool_field(2)


@dataclass
class CClanChatRooms_GetClanChatRoomInfo_Response(betterproto.Message):
    chat_group_summary: "CChatRoom_GetChatRoomGroupSummary_Response" = betterproto.message_field(
        1
    )


@dataclass
class CClanChatRooms_SetClanChatRoomPrivate_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    chat_room_private: bool = betterproto.bool_field(2)


@dataclass
class CClanChatRooms_SetClanChatRoomPrivate_Response(betterproto.Message):
    chat_room_private: bool = betterproto.bool_field(1)


@dataclass
class CChatMentions(betterproto.Message):
    mention_all: bool = betterproto.bool_field(1)
    mention_here: bool = betterproto.bool_field(2)
    mention_accountids: List[int] = betterproto.uint32_field(3)


@dataclass
class CChatRoom_IncomingChatMessage_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    steamid_sender: float = betterproto.fixed64_field(3)
    message: str = betterproto.string_field(4)
    timestamp: int = betterproto.uint32_field(5)
    mentions: "CChatMentions" = betterproto.message_field(6)
    ordinal: int = betterproto.uint32_field(7)
    server_message: "ServerMessage" = betterproto.message_field(8)
    message_no_bbcode: str = betterproto.string_field(9)
    chat_name: str = betterproto.string_field(10)


@dataclass
class CChatRoom_ChatMessageModified_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    chat_id: int = betterproto.uint64_field(2)
    messages: List[
        "CChatRoom_ChatMessageModified_NotificationChatMessage"
    ] = betterproto.message_field(3)


@dataclass
class CChatRoom_ChatMessageModified_NotificationChatMessage(betterproto.Message):
    server_timestamp: int = betterproto.uint32_field(1)
    ordinal: int = betterproto.uint32_field(2)
    deleted: bool = betterproto.bool_field(3)


@dataclass
class CChatRoom_MemberStateChange_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    member: "CChatRoomMember" = betterproto.message_field(2)
    change: "EChatRoomMemberStateChange" = betterproto.enum_field(3)


@dataclass
class CChatRoom_ChatRoomHeaderState_Notification(betterproto.Message):
    header_state: "CChatRoomGroupHeaderState" = betterproto.message_field(1)


@dataclass
class CChatRoom_ChatRoomGroupRoomsChange_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    default_chat_id: int = betterproto.uint64_field(2)
    chat_rooms: List["CChatRoomState"] = betterproto.message_field(3)


@dataclass
class CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification(betterproto.Message):
    chat_id: int = betterproto.uint64_field(1)
    chat_group_id: int = betterproto.uint64_field(2)


@dataclass
class ChatRoomClient_NotifyChatGroupUserStateChanged_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    user_chat_group_state: "CUserChatRoomGroupState" = betterproto.message_field(2)
    group_summary: "CChatRoom_GetChatRoomGroupSummary_Response" = betterproto.message_field(
        3
    )
    user_action: "EChatRoomMemberStateChange" = betterproto.enum_field(4)


@dataclass
class ChatRoomClient_NotifyChatRoomDisconnect_Notification(betterproto.Message):
    chat_group_ids: List[int] = betterproto.uint64_field(1)


@dataclass
class CChatRoomMemberListView(betterproto.Message):
    start: int = betterproto.int32_field(3)
    end: int = betterproto.int32_field(4)
    total_count: int = betterproto.int32_field(5)
    client_changenumber: int = betterproto.int32_field(6)
    server_changenumber: int = betterproto.int32_field(7)


@dataclass
class CChatRoomMemberSummaryCounts(betterproto.Message):
    ingame: int = betterproto.int32_field(1)
    online: int = betterproto.int32_field(2)
    offline: int = betterproto.int32_field(3)


@dataclass
class CChatRoomClient_MemberListViewUpdated_Notification(betterproto.Message):
    chat_group_id: int = betterproto.uint64_field(1)
    view_id: int = betterproto.uint64_field(2)
    view: "CChatRoomMemberListView" = betterproto.message_field(3)
    members: List[
        "CChatRoomClient_MemberListViewUpdated_NotificationMemberListViewEntry"
    ] = betterproto.message_field(4)
    status_flags: int = betterproto.uint32_field(5)
    member_summary: "CChatRoomMemberSummaryCounts" = betterproto.message_field(6)
    subscribed_personas: List[
        "CMsgClientPersonaStateFriend"
    ] = betterproto.message_field(7)


@dataclass
class CChatRoomClient_MemberListViewUpdated_NotificationMemberListViewEntry(
    betterproto.Message
):
    rank: int = betterproto.int32_field(1)
    accountid: int = betterproto.uint32_field(2)
    persona: "CMsgClientPersonaStateFriend" = betterproto.message_field(3)


@dataclass
class CChatUsability_ClientUsabilityMetrics_Notification(betterproto.Message):
    metrics_run_id: int = betterproto.uint32_field(1)
    client_build: int = betterproto.uint32_field(2)
    metrics_version: int = betterproto.uint32_field(3)
    in_web: bool = betterproto.bool_field(4)
    settings: "CChatUsability_ClientUsabilityMetrics_NotificationSettings" = betterproto.message_field(
        10
    )
    voice_settings: "CChatUsability_ClientUsabilityMetrics_NotificationVoiceSettings" = betterproto.message_field(
        11
    )
    ui_state: "CChatUsability_ClientUsabilityMetrics_NotificationUIState" = betterproto.message_field(
        12
    )
    metrics: "CChatUsability_ClientUsabilityMetrics_NotificationMetrics" = betterproto.message_field(
        13
    )


@dataclass
class CChatUsability_ClientUsabilityMetrics_NotificationSettings(betterproto.Message):
    notifications_show_ingame: bool = betterproto.bool_field(1)
    notifications_show_online: bool = betterproto.bool_field(2)
    notifications_show_message: bool = betterproto.bool_field(3)
    notifications_events_and_announcements: bool = betterproto.bool_field(4)
    sounds_play_ingame: bool = betterproto.bool_field(5)
    sounds_play_online: bool = betterproto.bool_field(6)
    sounds_play_message: bool = betterproto.bool_field(7)
    sounds_events_and_announcements: bool = betterproto.bool_field(8)
    always_new_chat_window: bool = betterproto.bool_field(9)
    force_alphabetic_friend_sorting: bool = betterproto.bool_field(10)
    chat_flash_mode: int = betterproto.int32_field(11)
    remember_open_chats: bool = betterproto.bool_field(12)
    compact_quick_access: bool = betterproto.bool_field(13)
    compact_friends_list: bool = betterproto.bool_field(14)
    notifications_show_chat_room_notification: bool = betterproto.bool_field(15)
    sounds_play_chat_room_notification: bool = betterproto.bool_field(16)
    hide_offline_friends_in_tag_groups: bool = betterproto.bool_field(17)
    hide_categorized_friends: bool = betterproto.bool_field(18)
    categorize_in_game_friends_by_game: bool = betterproto.bool_field(19)
    chat_font_size: int = betterproto.int32_field(20)
    use24hour_clock: bool = betterproto.bool_field(21)
    do_not_disturb_mode: bool = betterproto.bool_field(22)
    disable_embed_inlining: bool = betterproto.bool_field(23)
    sign_into_friends: bool = betterproto.bool_field(24)


@dataclass
class CChatUsability_ClientUsabilityMetrics_NotificationVoiceSettings(
    betterproto.Message
):
    voice_input_gain: float = betterproto.float_field(1)
    voice_output_gain: float = betterproto.float_field(2)
    noise_gate_level: int = betterproto.int32_field(3)
    voice_use_echo_cancellation: bool = betterproto.bool_field(4)
    voice_use_noise_cancellation: bool = betterproto.bool_field(5)
    voice_use_auto_gain_control: bool = betterproto.bool_field(6)
    selected_non_default_mic: bool = betterproto.bool_field(7)
    selected_non_default_output: bool = betterproto.bool_field(8)
    push_to_talk_enabled: bool = betterproto.bool_field(9)
    push_to_mute_enabled: bool = betterproto.bool_field(10)
    play_ptt_sounds: bool = betterproto.bool_field(11)


@dataclass
class CChatUsability_ClientUsabilityMetrics_NotificationUIState(betterproto.Message):
    friends_list_height: int = betterproto.int32_field(1)
    friends_list_width: int = betterproto.int32_field(2)
    friends_list_docked: bool = betterproto.bool_field(3)
    friends_list_collapsed: bool = betterproto.bool_field(4)
    friends_list_group_chats_height: int = betterproto.int32_field(5)
    friends_list_visible: bool = betterproto.bool_field(6)
    chat_popups_opened: int = betterproto.int32_field(7)
    group_chat_tabs_opened: int = betterproto.int32_field(8)
    friend_chat_tabs_opened: int = betterproto.int32_field(9)
    chat_window_width: int = betterproto.int32_field(10)
    chat_window_height: int = betterproto.int32_field(11)
    category_collapse: "CChatUsability_ClientUsabilityMetrics_NotificationUIStateCategoryCollapseState" = betterproto.message_field(
        12
    )
    group_chat_left_col_collapsed: int = betterproto.int32_field(13)
    group_chat_right_col_collapsed: int = betterproto.int32_field(14)
    in_one_on_one_voice_chat: bool = betterproto.bool_field(15)
    in_group_voice_chat: bool = betterproto.bool_field(16)


@dataclass
class CChatUsability_ClientUsabilityMetrics_NotificationUIStateCategoryCollapseState(
    betterproto.Message
):
    in_game_collapsed: bool = betterproto.bool_field(1)
    online_collapsed: bool = betterproto.bool_field(2)
    offline_collapsed: bool = betterproto.bool_field(3)
    game_groups_collapsed: int = betterproto.int32_field(4)
    categories_collapsed: int = betterproto.int32_field(5)


@dataclass
class CChatUsability_ClientUsabilityMetrics_NotificationMetrics(betterproto.Message):
    friends_count: int = betterproto.int32_field(1)
    friends_category_count: int = betterproto.int32_field(2)
    friends_categorized_count: int = betterproto.int32_field(3)
    friends_online_count: int = betterproto.int32_field(4)
    friends_in_game_count: int = betterproto.int32_field(5)
    friends_in_game_singleton_count: int = betterproto.int32_field(6)
    game_group_count: int = betterproto.int32_field(7)
    friends_favorite_count: int = betterproto.int32_field(8)
    group_chat_count: int = betterproto.int32_field(9)
    group_chat_favorite_count: int = betterproto.int32_field(10)


@dataclass
class CChatUsability_RequestClientUsabilityMetrics_Notification(betterproto.Message):
    metrics_run_id: int = betterproto.uint32_field(1)


class ChatStub(betterproto.ServiceStub):
    async def request_friend_persona_states(
        self,
    ) -> CChat_RequestFriendPersonaStates_Response:
        request = CChat_RequestFriendPersonaStates_Request()

        return await self._unary_unary(
            "/.Chat/RequestFriendPersonaStates",
            request,
            CChat_RequestFriendPersonaStates_Response,
        )


class ChatRoomStub(betterproto.ServiceStub):
    async def create_chat_room_group(
        self,
        *,
        steamid_partner: float = 0,
        steamid_invited: float = 0,
        name: str = "",
        steamid_invitees: List[float] = [],
        watching_broadcast_accountid: int = 0,
        watching_broadcast_channel_id: int = 0,
    ) -> CChatRoom_CreateChatRoomGroup_Response:
        request = CChatRoom_CreateChatRoomGroup_Request()
        request.steamid_partner = steamid_partner
        request.steamid_invited = steamid_invited
        request.name = name
        request.steamid_invitees = steamid_invitees
        request.watching_broadcast_accountid = watching_broadcast_accountid
        request.watching_broadcast_channel_id = watching_broadcast_channel_id

        return await self._unary_unary(
            "/.ChatRoom/CreateChatRoomGroup",
            request,
            CChatRoom_CreateChatRoomGroup_Response,
        )

    async def save_chat_room_group(
        self, *, chat_group_id: int = 0, name: str = ""
    ) -> CChatRoom_SaveChatRoomGroup_Response:
        request = CChatRoom_SaveChatRoomGroup_Request()
        request.chat_group_id = chat_group_id
        request.name = name

        return await self._unary_unary(
            "/.ChatRoom/SaveChatRoomGroup",
            request,
            CChatRoom_SaveChatRoomGroup_Response,
        )

    async def rename_chat_room_group(
        self, *, chat_group_id: int = 0, name: str = ""
    ) -> CChatRoom_RenameChatRoomGroup_Response:
        request = CChatRoom_RenameChatRoomGroup_Request()
        request.chat_group_id = chat_group_id
        request.name = name

        return await self._unary_unary(
            "/.ChatRoom/RenameChatRoomGroup",
            request,
            CChatRoom_RenameChatRoomGroup_Response,
        )

    async def set_chat_room_group_tagline(
        self, *, chat_group_id: int = 0, tagline: str = ""
    ) -> CChatRoom_SetChatRoomGroupTagline_Response:
        request = CChatRoom_SetChatRoomGroupTagline_Request()
        request.chat_group_id = chat_group_id
        request.tagline = tagline

        return await self._unary_unary(
            "/.ChatRoom/SetChatRoomGroupTagline",
            request,
            CChatRoom_SetChatRoomGroupTagline_Response,
        )

    async def set_chat_room_group_avatar(
        self, *, chat_group_id: int = 0, avatar_sha: bytes = b""
    ) -> CChatRoom_SetChatRoomGroupAvatar_Response:
        request = CChatRoom_SetChatRoomGroupAvatar_Request()
        request.chat_group_id = chat_group_id
        request.avatar_sha = avatar_sha

        return await self._unary_unary(
            "/.ChatRoom/SetChatRoomGroupAvatar",
            request,
            CChatRoom_SetChatRoomGroupAvatar_Response,
        )

    async def set_chat_room_group_watching_broadcast(
        self,
        *,
        chat_group_id: int = 0,
        watching_broadcast_accountid: int = 0,
        watching_broadcast_channel_id: int = 0,
    ) -> CChatRoom_SetChatRoomGroupWatchingBroadcast_Response:
        request = CChatRoom_SetChatRoomGroupWatchingBroadcast_Request()
        request.chat_group_id = chat_group_id
        request.watching_broadcast_accountid = watching_broadcast_accountid
        request.watching_broadcast_channel_id = watching_broadcast_channel_id

        return await self._unary_unary(
            "/.ChatRoom/SetChatRoomGroupWatchingBroadcast",
            request,
            CChatRoom_SetChatRoomGroupWatchingBroadcast_Response,
        )

    async def join_mini_game_for_chat_room_group(
        self, *, chat_group_id: int = 0, chat_id: int = 0
    ) -> CChatRoom_JoinMiniGameForChatRoomGroup_Response:
        request = CChatRoom_JoinMiniGameForChatRoomGroup_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id

        return await self._unary_unary(
            "/.ChatRoom/JoinMiniGameForChatRoomGroup",
            request,
            CChatRoom_JoinMiniGameForChatRoomGroup_Response,
        )

    async def end_mini_game_for_chat_room_group(
        self, *, chat_group_id: int = 0, chat_id: int = 0, minigame_id: int = 0
    ) -> CChatRoom_EndMiniGameForChatRoomGroup_Response:
        request = CChatRoom_EndMiniGameForChatRoomGroup_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.minigame_id = minigame_id

        return await self._unary_unary(
            "/.ChatRoom/EndMiniGameForChatRoomGroup",
            request,
            CChatRoom_EndMiniGameForChatRoomGroup_Response,
        )

    async def mute_user_in_group(
        self, *, chat_group_id: int = 0, steamid: float = 0, expiration: int = 0
    ) -> CChatRoom_MuteUser_Response:
        request = CChatRoom_MuteUser_Request()
        request.chat_group_id = chat_group_id
        request.steamid = steamid
        request.expiration = expiration

        return await self._unary_unary(
            "/.ChatRoom/MuteUserInGroup", request, CChatRoom_MuteUser_Response,
        )

    async def kick_user_from_group(
        self, *, chat_group_id: int = 0, steamid: float = 0, expiration: int = 0
    ) -> CChatRoom_KickUser_Response:
        request = CChatRoom_KickUser_Request()
        request.chat_group_id = chat_group_id
        request.steamid = steamid
        request.expiration = expiration

        return await self._unary_unary(
            "/.ChatRoom/KickUserFromGroup", request, CChatRoom_KickUser_Response,
        )

    async def set_user_ban_state(
        self, *, chat_group_id: int = 0, steamid: float = 0, ban_state: bool = False
    ) -> CChatRoom_SetUserBanState_Response:
        request = CChatRoom_SetUserBanState_Request()
        request.chat_group_id = chat_group_id
        request.steamid = steamid
        request.ban_state = ban_state

        return await self._unary_unary(
            "/.ChatRoom/SetUserBanState", request, CChatRoom_SetUserBanState_Response,
        )

    async def revoke_invite_to_group(
        self, *, chat_group_id: int = 0, steamid: float = 0
    ) -> CChatRoom_RevokeInvite_Response:
        request = CChatRoom_RevokeInvite_Request()
        request.chat_group_id = chat_group_id
        request.steamid = steamid

        return await self._unary_unary(
            "/.ChatRoom/RevokeInviteToGroup", request, CChatRoom_RevokeInvite_Response,
        )

    async def create_role(
        self, *, chat_group_id: int = 0, name: str = ""
    ) -> CChatRoom_CreateRole_Response:
        request = CChatRoom_CreateRole_Request()
        request.chat_group_id = chat_group_id
        request.name = name

        return await self._unary_unary(
            "/.ChatRoom/CreateRole", request, CChatRoom_CreateRole_Response,
        )

    async def get_roles(self, *, chat_group_id: int = 0) -> CChatRoom_GetRoles_Response:
        request = CChatRoom_GetRoles_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/GetRoles", request, CChatRoom_GetRoles_Response,
        )

    async def rename_role(
        self, *, chat_group_id: int = 0, role_id: int = 0, name: str = ""
    ) -> CChatRoom_RenameRole_Response:
        request = CChatRoom_RenameRole_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id
        request.name = name

        return await self._unary_unary(
            "/.ChatRoom/RenameRole", request, CChatRoom_RenameRole_Response,
        )

    async def reorder_role(
        self, *, chat_group_id: int = 0, role_id: int = 0, ordinal: int = 0
    ) -> CChatRoom_ReorderRole_Response:
        request = CChatRoom_ReorderRole_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id
        request.ordinal = ordinal

        return await self._unary_unary(
            "/.ChatRoom/ReorderRole", request, CChatRoom_ReorderRole_Response,
        )

    async def delete_role(
        self, *, chat_group_id: int = 0, role_id: int = 0
    ) -> CChatRoom_DeleteRole_Response:
        request = CChatRoom_DeleteRole_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id

        return await self._unary_unary(
            "/.ChatRoom/DeleteRole", request, CChatRoom_DeleteRole_Response,
        )

    async def get_role_actions(
        self, *, chat_group_id: int = 0, role_id: int = 0
    ) -> CChatRoom_GetRoleActions_Response:
        request = CChatRoom_GetRoleActions_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id

        return await self._unary_unary(
            "/.ChatRoom/GetRoleActions", request, CChatRoom_GetRoleActions_Response,
        )

    async def replace_role_actions(
        self,
        *,
        chat_group_id: int = 0,
        role_id: int = 0,
        actions: Optional["CChatRoleActions"] = None,
    ) -> CChatRoom_ReplaceRoleActions_Response:
        request = CChatRoom_ReplaceRoleActions_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id
        if actions is not None:
            request.actions = actions

        return await self._unary_unary(
            "/.ChatRoom/ReplaceRoleActions",
            request,
            CChatRoom_ReplaceRoleActions_Response,
        )

    async def add_role_to_user(
        self, *, chat_group_id: int = 0, role_id: int = 0, steamid: float = 0
    ) -> CChatRoom_AddRoleToUser_Response:
        request = CChatRoom_AddRoleToUser_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id
        request.steamid = steamid

        return await self._unary_unary(
            "/.ChatRoom/AddRoleToUser", request, CChatRoom_AddRoleToUser_Response,
        )

    async def get_roles_for_user(
        self, *, chat_group_id: int = 0, steamid: float = 0
    ) -> CChatRoom_GetRolesForUser_Response:
        request = CChatRoom_GetRolesForUser_Request()
        request.chat_group_id = chat_group_id
        request.steamid = steamid

        return await self._unary_unary(
            "/.ChatRoom/GetRolesForUser", request, CChatRoom_GetRolesForUser_Response,
        )

    async def delete_role_from_user(
        self, *, chat_group_id: int = 0, role_id: int = 0, steamid: float = 0
    ) -> CChatRoom_DeleteRoleFromUser_Response:
        request = CChatRoom_DeleteRoleFromUser_Request()
        request.chat_group_id = chat_group_id
        request.role_id = role_id
        request.steamid = steamid

        return await self._unary_unary(
            "/.ChatRoom/DeleteRoleFromUser",
            request,
            CChatRoom_DeleteRoleFromUser_Response,
        )

    async def join_chat_room_group(
        self, *, chat_group_id: int = 0, invite_code: str = "", chat_id: int = 0
    ) -> CChatRoom_JoinChatRoomGroup_Response:
        request = CChatRoom_JoinChatRoomGroup_Request()
        request.chat_group_id = chat_group_id
        request.invite_code = invite_code
        request.chat_id = chat_id

        return await self._unary_unary(
            "/.ChatRoom/JoinChatRoomGroup",
            request,
            CChatRoom_JoinChatRoomGroup_Response,
        )

    async def invite_friend_to_chat_room_group(
        self,
        *,
        chat_group_id: int = 0,
        steamid: float = 0,
        chat_id: int = 0,
        skip_friendsui_check: bool = False,
    ) -> CChatRoom_InviteFriendToChatRoomGroup_Response:
        request = CChatRoom_InviteFriendToChatRoomGroup_Request()
        request.chat_group_id = chat_group_id
        request.steamid = steamid
        request.chat_id = chat_id
        request.skip_friendsui_check = skip_friendsui_check

        return await self._unary_unary(
            "/.ChatRoom/InviteFriendToChatRoomGroup",
            request,
            CChatRoom_InviteFriendToChatRoomGroup_Response,
        )

    async def leave_chat_room_group(
        self, *, chat_group_id: int = 0
    ) -> CChatRoom_LeaveChatRoomGroup_Response:
        request = CChatRoom_LeaveChatRoomGroup_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/LeaveChatRoomGroup",
            request,
            CChatRoom_LeaveChatRoomGroup_Response,
        )

    async def create_chat_room(
        self, *, chat_group_id: int = 0, name: str = "", allow_voice: bool = False
    ) -> CChatRoom_CreateChatRoom_Response:
        request = CChatRoom_CreateChatRoom_Request()
        request.chat_group_id = chat_group_id
        request.name = name
        request.allow_voice = allow_voice

        return await self._unary_unary(
            "/.ChatRoom/CreateChatRoom", request, CChatRoom_CreateChatRoom_Response,
        )

    async def delete_chat_room(
        self, *, chat_group_id: int = 0, chat_id: int = 0
    ) -> CChatRoom_DeleteChatRoom_Response:
        request = CChatRoom_DeleteChatRoom_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id

        return await self._unary_unary(
            "/.ChatRoom/DeleteChatRoom", request, CChatRoom_DeleteChatRoom_Response,
        )

    async def rename_chat_room(
        self, *, chat_group_id: int = 0, chat_id: int = 0, name: str = ""
    ) -> CChatRoom_RenameChatRoom_Response:
        request = CChatRoom_RenameChatRoom_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.name = name

        return await self._unary_unary(
            "/.ChatRoom/RenameChatRoom", request, CChatRoom_RenameChatRoom_Response,
        )

    async def reorder_chat_room(
        self, *, chat_group_id: int = 0, chat_id: int = 0, move_after_chat_id: int = 0
    ) -> CChatRoom_ReorderChatRoom_Response:
        request = CChatRoom_ReorderChatRoom_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.move_after_chat_id = move_after_chat_id

        return await self._unary_unary(
            "/.ChatRoom/ReorderChatRoom", request, CChatRoom_ReorderChatRoom_Response,
        )

    async def send_chat_message(
        self,
        *,
        chat_group_id: int = 0,
        chat_id: int = 0,
        message: str = "",
        echo_to_sender: bool = False,
    ) -> CChatRoom_SendChatMessage_Response:
        request = CChatRoom_SendChatMessage_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.message = message
        request.echo_to_sender = echo_to_sender

        return await self._unary_unary(
            "/.ChatRoom/SendChatMessage", request, CChatRoom_SendChatMessage_Response,
        )

    async def join_voice_chat(
        self, *, chat_group_id: int = 0, chat_id: int = 0
    ) -> CChatRoom_JoinVoiceChat_Response:
        request = CChatRoom_JoinVoiceChat_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id

        return await self._unary_unary(
            "/.ChatRoom/JoinVoiceChat", request, CChatRoom_JoinVoiceChat_Response,
        )

    async def leave_voice_chat(
        self, *, chat_group_id: int = 0, chat_id: int = 0
    ) -> CChatRoom_LeaveVoiceChat_Response:
        request = CChatRoom_LeaveVoiceChat_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id

        return await self._unary_unary(
            "/.ChatRoom/LeaveVoiceChat", request, CChatRoom_LeaveVoiceChat_Response,
        )

    async def get_message_history(  # TODO add channel.history
        self,
        *,
        chat_group_id: int = 0,
        chat_id: int = 0,
        last_time: int = 0,
        last_ordinal: int = 0,
        start_time: int = 0,
        start_ordinal: int = 0,
        max_count: int = 0,
    ) -> CChatRoom_GetMessageHistory_Response:
        request = CChatRoom_GetMessageHistory_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.last_time = last_time
        request.last_ordinal = last_ordinal
        request.start_time = start_time
        request.start_ordinal = start_ordinal
        request.max_count = max_count

        return await self._unary_unary(
            "/.ChatRoom/GetMessageHistory",
            request,
            CChatRoom_GetMessageHistory_Response,
        )

    async def get_my_chat_room_groups(self) -> CChatRoom_GetMyChatRoomGroups_Response:
        request = CChatRoom_GetMyChatRoomGroups_Request()

        return await self._unary_unary(
            "/.ChatRoom/GetMyChatRoomGroups",
            request,
            CChatRoom_GetMyChatRoomGroups_Response,
        )

    async def get_chat_room_group_state(
        self, *, chat_group_id: int = 0
    ) -> CChatRoom_GetChatRoomGroupState_Response:
        request = CChatRoom_GetChatRoomGroupState_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/GetChatRoomGroupState",
            request,
            CChatRoom_GetChatRoomGroupState_Response,
        )

    async def get_chat_room_group_summary(
        self, *, chat_group_id: int = 0
    ) -> CChatRoom_GetChatRoomGroupSummary_Response:
        request = CChatRoom_GetChatRoomGroupSummary_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/GetChatRoomGroupSummary",
            request,
            CChatRoom_GetChatRoomGroupSummary_Response,
        )

    async def ack_chat_message(
        self, *, chat_group_id: int = 0, chat_id: int = 0, timestamp: int = 0
    ) -> NoResponse:
        request = CChatRoom_AckChatMessage_Notification()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.timestamp = timestamp

        return await self._unary_unary(
            "/.ChatRoom/AckChatMessage", request, NoResponse,
        )

    async def create_invite_link(
        self, *, chat_group_id: int = 0, seconds_valid: int = 0, chat_id: int = 0
    ) -> CChatRoom_CreateInviteLink_Response:
        request = CChatRoom_CreateInviteLink_Request()
        request.chat_group_id = chat_group_id
        request.seconds_valid = seconds_valid
        request.chat_id = chat_id

        return await self._unary_unary(
            "/.ChatRoom/CreateInviteLink", request, CChatRoom_CreateInviteLink_Response,
        )

    async def get_invite_link_info(
        self, *, invite_code: str = ""
    ) -> CChatRoom_GetInviteLinkInfo_Response:
        request = CChatRoom_GetInviteLinkInfo_Request()
        request.invite_code = invite_code

        return await self._unary_unary(
            "/.ChatRoom/GetInviteLinkInfo",
            request,
            CChatRoom_GetInviteLinkInfo_Response,
        )

    async def get_invite_info(
        self,
        *,
        steamid_invitee: float = 0,
        chat_group_id: int = 0,
        chat_id: int = 0,
        invite_code: str = "",
    ) -> CChatRoom_GetInviteInfo_Response:
        request = CChatRoom_GetInviteInfo_Request()
        request.steamid_invitee = steamid_invitee
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.invite_code = invite_code

        return await self._unary_unary(
            "/.ChatRoom/GetInviteInfo", request, CChatRoom_GetInviteInfo_Response,
        )

    async def get_invite_links_for_group(
        self, *, chat_group_id: int = 0
    ) -> CChatRoom_GetInviteLinksForGroup_Response:
        request = CChatRoom_GetInviteLinksForGroup_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/GetInviteLinksForGroup",
            request,
            CChatRoom_GetInviteLinksForGroup_Response,
        )

    async def get_ban_list(
        self, *, chat_group_id: int = 0
    ) -> CChatRoom_GetBanList_Response:
        request = CChatRoom_GetBanList_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/GetBanList", request, CChatRoom_GetBanList_Response,
        )

    async def get_invite_list(
        self, *, chat_group_id: int = 0
    ) -> CChatRoom_GetInviteList_Response:
        request = CChatRoom_GetInviteList_Request()
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoom/GetInviteList", request, CChatRoom_GetInviteList_Response,
        )

    async def delete_invite_link(
        self, *, chat_group_id: int = 0, invite_code: str = ""
    ) -> CChatRoom_DeleteInviteLink_Response:
        request = CChatRoom_DeleteInviteLink_Request()
        request.chat_group_id = chat_group_id
        request.invite_code = invite_code

        return await self._unary_unary(
            "/.ChatRoom/DeleteInviteLink", request, CChatRoom_DeleteInviteLink_Response,
        )

    async def set_session_active_chat_room_groups(
        self,
        *,
        chat_group_ids: List[int] = [],
        chat_groups_data_requested: List[int] = [],
        virtualize_members_threshold: int = 0,
    ) -> CChatRoom_SetSessionActiveChatRoomGroups_Response:
        request = CChatRoom_SetSessionActiveChatRoomGroups_Request()
        request.chat_group_ids = chat_group_ids
        request.chat_groups_data_requested = chat_groups_data_requested
        request.virtualize_members_threshold = virtualize_members_threshold

        return await self._unary_unary(
            "/.ChatRoom/SetSessionActiveChatRoomGroups",
            request,
            CChatRoom_SetSessionActiveChatRoomGroups_Response,
        )

    async def set_user_chat_group_preferences(
        self,
        *,
        chat_group_id: int = 0,
        chat_group_preferences: Optional[
            "CChatRoom_SetUserChatGroupPreferences_RequestChatGroupPreferences"
        ] = None,
        chat_room_preferences: List[
            "CChatRoom_SetUserChatGroupPreferences_RequestChatRoomPreferences"
        ] = [],
    ) -> CChatRoom_SetUserChatGroupPreferences_Response:
        request = CChatRoom_SetUserChatGroupPreferences_Request()
        request.chat_group_id = chat_group_id
        if chat_group_preferences is not None:
            request.chat_group_preferences = chat_group_preferences
        if chat_room_preferences is not None:
            request.chat_room_preferences = chat_room_preferences

        return await self._unary_unary(
            "/.ChatRoom/SetUserChatGroupPreferences",
            request,
            CChatRoom_SetUserChatGroupPreferences_Response,
        )

    async def delete_chat_messages(
        self,
        *,
        chat_group_id: int = 0,
        chat_id: int = 0,
        messages: List["CChatRoom_DeleteChatMessages_RequestMessage"] = [],
    ) -> CChatRoom_DeleteChatMessages_Response:
        request = CChatRoom_DeleteChatMessages_Request()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        if messages is not None:
            request.messages = messages

        return await self._unary_unary(
            "/.ChatRoom/DeleteChatMessages",
            request,
            CChatRoom_DeleteChatMessages_Response,
        )

    async def update_member_list_view(
        self,
        *,
        chat_group_id: int = 0,
        view_id: int = 0,
        start: int = 0,
        end: int = 0,
        client_changenumber: int = 0,
        delete_view: bool = False,
        persona_subscribe_accountids: List[int] = [],
        persona_unsubscribe_accountids: List[int] = [],
    ) -> NoResponse:
        request = CChatRoom_UpdateMemberListView_Notification()
        request.chat_group_id = chat_group_id
        request.view_id = view_id
        request.start = start
        request.end = end
        request.client_changenumber = client_changenumber
        request.delete_view = delete_view
        request.persona_subscribe_accountids = persona_subscribe_accountids
        request.persona_unsubscribe_accountids = persona_unsubscribe_accountids

        return await self._unary_unary(
            "/.ChatRoom/UpdateMemberListView", request, NoResponse,
        )

    async def search_members(
        self,
        *,
        chat_group_id: int = 0,
        search_id: int = 0,
        search_text: str = "",
        max_results: int = 0,
    ) -> CChatRoom_SearchMembers_Response:
        request = CChatRoom_SearchMembers_Request()
        request.chat_group_id = chat_group_id
        request.search_id = search_id
        request.search_text = search_text
        request.max_results = max_results

        return await self._unary_unary(
            "/.ChatRoom/SearchMembers", request, CChatRoom_SearchMembers_Response,
        )


class ClanChatRoomsStub(betterproto.ServiceStub):
    async def get_clan_chat_room_info(
        self, *, steamid: float = 0, autocreate: bool = False
    ) -> CClanChatRooms_GetClanChatRoomInfo_Response:
        request = CClanChatRooms_GetClanChatRoomInfo_Request()
        request.steamid = steamid
        request.autocreate = autocreate

        return await self._unary_unary(
            "/.ClanChatRooms/GetClanChatRoomInfo",
            request,
            CClanChatRooms_GetClanChatRoomInfo_Response,
        )

    async def set_clan_chat_room_private(
        self, *, steamid: float = 0, chat_room_private: bool = False
    ) -> CClanChatRooms_SetClanChatRoomPrivate_Response:
        request = CClanChatRooms_SetClanChatRoomPrivate_Request()
        request.steamid = steamid
        request.chat_room_private = chat_room_private

        return await self._unary_unary(
            "/.ClanChatRooms/SetClanChatRoomPrivate",
            request,
            CClanChatRooms_SetClanChatRoomPrivate_Response,
        )


class ChatRoomClientStub(betterproto.ServiceStub):
    async def notify_incoming_chat_message(
        self,
        *,
        chat_group_id: int = 0,
        chat_id: int = 0,
        steamid_sender: float = 0,
        message: str = "",
        timestamp: int = 0,
        mentions: Optional["CChatMentions"] = None,
        ordinal: int = 0,
        server_message: Optional["ServerMessage"] = None,
        message_no_bbcode: str = "",
        chat_name: str = "",
    ) -> NoResponse:
        request = CChatRoom_IncomingChatMessage_Notification()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.steamid_sender = steamid_sender
        request.message = message
        request.timestamp = timestamp
        if mentions is not None:
            request.mentions = mentions
        request.ordinal = ordinal
        if server_message is not None:
            request.server_message = server_message
        request.message_no_bbcode = message_no_bbcode
        request.chat_name = chat_name

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyIncomingChatMessage", request, NoResponse,
        )

    async def notify_chat_message_modified(
        self,
        *,
        chat_group_id: int = 0,
        chat_id: int = 0,
        messages: List["CChatRoom_ChatMessageModified_NotificationChatMessage"] = [],
    ) -> NoResponse:
        request = CChatRoom_ChatMessageModified_Notification()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        if messages is not None:
            request.messages = messages

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyChatMessageModified", request, NoResponse,
        )

    async def notify_member_state_change(
        self,
        *,
        chat_group_id: int = 0,
        member: Optional["CChatRoomMember"] = None,
        change: "EChatRoomMemberStateChange" = 0,
    ) -> NoResponse:
        request = CChatRoom_MemberStateChange_Notification()
        request.chat_group_id = chat_group_id
        if member is not None:
            request.member = member
        request.change = change

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyMemberStateChange", request, NoResponse,
        )

    async def notify_chat_room_header_state_change(
        self, *, header_state: Optional["CChatRoomGroupHeaderState"] = None
    ) -> NoResponse:
        request = CChatRoom_ChatRoomHeaderState_Notification()
        if header_state is not None:
            request.header_state = header_state

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyChatRoomHeaderStateChange", request, NoResponse,
        )

    async def notify_chat_room_group_rooms_change(
        self,
        *,
        chat_group_id: int = 0,
        default_chat_id: int = 0,
        chat_rooms: List["CChatRoomState"] = [],
    ) -> NoResponse:
        request = CChatRoom_ChatRoomGroupRoomsChange_Notification()
        request.chat_group_id = chat_group_id
        request.default_chat_id = default_chat_id
        if chat_rooms is not None:
            request.chat_rooms = chat_rooms

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyChatRoomGroupRoomsChange", request, NoResponse,
        )

    async def notify_should_rejoin_chat_room_voice_chat(
        self, *, chat_id: int = 0, chat_group_id: int = 0
    ) -> NoResponse:
        request = CChatRoom_NotifyShouldRejoinChatRoomVoiceChat_Notification()
        request.chat_id = chat_id
        request.chat_group_id = chat_group_id

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyShouldRejoinChatRoomVoiceChat", request, NoResponse,
        )

    async def notify_chat_group_user_state_changed(
        self,
        *,
        chat_group_id: int = 0,
        user_chat_group_state: Optional["CUserChatRoomGroupState"] = None,
        group_summary: Optional["CChatRoom_GetChatRoomGroupSummary_Response"] = None,
        user_action: "EChatRoomMemberStateChange" = 0,
    ) -> NoResponse:
        request = ChatRoomClient_NotifyChatGroupUserStateChanged_Notification()
        request.chat_group_id = chat_group_id
        if user_chat_group_state is not None:
            request.user_chat_group_state = user_chat_group_state
        if group_summary is not None:
            request.group_summary = group_summary
        request.user_action = user_action

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyChatGroupUserStateChanged", request, NoResponse,
        )

    async def notify_ack_chat_message_echo(
        self, *, chat_group_id: int = 0, chat_id: int = 0, timestamp: int = 0
    ) -> NoResponse:
        request = CChatRoom_AckChatMessage_Notification()
        request.chat_group_id = chat_group_id
        request.chat_id = chat_id
        request.timestamp = timestamp

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyAckChatMessageEcho", request, NoResponse,
        )

    async def notify_chat_room_disconnect(
        self, *, chat_group_ids: List[int] = []
    ) -> NoResponse:
        request = ChatRoomClient_NotifyChatRoomDisconnect_Notification()
        request.chat_group_ids = chat_group_ids

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyChatRoomDisconnect", request, NoResponse,
        )

    async def notify_member_list_view_updated(
        self,
        *,
        chat_group_id: int = 0,
        view_id: int = 0,
        view: Optional["CChatRoomMemberListView"] = None,
        members: List[
            "CChatRoomClient_MemberListViewUpdated_NotificationMemberListViewEntry"
        ] = [],
        status_flags: int = 0,
        member_summary: Optional["CChatRoomMemberSummaryCounts"] = None,
        subscribed_personas: List["CMsgClientPersonaStateFriend"] = [],
    ) -> NoResponse:
        request = CChatRoomClient_MemberListViewUpdated_Notification()
        request.chat_group_id = chat_group_id
        request.view_id = view_id
        if view is not None:
            request.view = view
        if members is not None:
            request.members = members
        request.status_flags = status_flags
        if member_summary is not None:
            request.member_summary = member_summary
        if subscribed_personas is not None:
            request.subscribed_personas = subscribed_personas

        return await self._unary_unary(
            "/.ChatRoomClient/NotifyMemberListViewUpdated", request, NoResponse,
        )


class ChatUsabilityStub(betterproto.ServiceStub):
    async def notify_client_usability_metrics(
        self,
        *,
        metrics_run_id: int = 0,
        client_build: int = 0,
        metrics_version: int = 0,
        in_web: bool = False,
        settings: Optional[
            "CChatUsability_ClientUsabilityMetrics_NotificationSettings"
        ] = None,
        voice_settings: Optional[
            "CChatUsability_ClientUsabilityMetrics_NotificationVoiceSettings"
        ] = None,
        ui_state: Optional[
            "CChatUsability_ClientUsabilityMetrics_NotificationUIState"
        ] = None,
        metrics: Optional[
            "CChatUsability_ClientUsabilityMetrics_NotificationMetrics"
        ] = None,
    ) -> NoResponse:
        request = CChatUsability_ClientUsabilityMetrics_Notification()
        request.metrics_run_id = metrics_run_id
        request.client_build = client_build
        request.metrics_version = metrics_version
        request.in_web = in_web
        if settings is not None:
            request.settings = settings
        if voice_settings is not None:
            request.voice_settings = voice_settings
        if ui_state is not None:
            request.ui_state = ui_state
        if metrics is not None:
            request.metrics = metrics

        return await self._unary_unary(
            "/.ChatUsability/NotifyClientUsabilityMetrics", request, NoResponse,
        )


class ChatUsabilityClientStub(betterproto.ServiceStub):
    async def notify_request_client_usability_metrics(
        self, *, metrics_run_id: int = 0
    ) -> NoResponse:
        request = CChatUsability_RequestClientUsabilityMetrics_Notification()
        request.metrics_run_id = metrics_run_id

        return await self._unary_unary(
            "/.ChatUsabilityClient/NotifyRequestClientUsabilityMetrics",
            request,
            NoResponse,
        )
