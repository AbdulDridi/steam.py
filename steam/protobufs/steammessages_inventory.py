# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_inventory.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List, Optional

import betterproto

from .steammessages_unified_base import NoResponse


@dataclass
class CInventory_GetInventory_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    steamid: int = betterproto.uint64_field(2)


@dataclass
class CInventory_Response(betterproto.Message):
    etag: str = betterproto.string_field(1)
    removeditemids: List[int] = betterproto.uint64_field(2)
    item_json: str = betterproto.string_field(3)
    itemdef_json: str = betterproto.string_field(4)
    ticket: bytes = betterproto.bytes_field(5)
    replayed: bool = betterproto.bool_field(6)


@dataclass
class CInventory_ExchangeItem_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    steamid: int = betterproto.uint64_field(2)
    materialsitemid: List[int] = betterproto.uint64_field(3)
    materialsquantity: List[int] = betterproto.uint32_field(4)
    outputitemdefid: int = betterproto.uint64_field(5)


@dataclass
class CInventory_GetEligiblePromoItemDefIDs_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    steamid: int = betterproto.uint64_field(2)


@dataclass
class CInventory_GetEligiblePromoItemDefIDs_Response(betterproto.Message):
    itemdefids: List[int] = betterproto.uint64_field(1)


@dataclass
class CInventory_AddItem_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    itemdefid: List[int] = betterproto.uint64_field(2)
    itempropsjson: List[str] = betterproto.string_field(3)
    steamid: int = betterproto.uint64_field(4)
    notify: bool = betterproto.bool_field(5)
    requestid: int = betterproto.uint64_field(6)
    trade_restriction: bool = betterproto.bool_field(7)
    is_purchase: bool = betterproto.bool_field(8)


@dataclass
class CInventory_ModifyItems_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    steamid: int = betterproto.uint64_field(2)
    updates: List[
        "CInventory_ModifyItems_RequestItemPropertyUpdate"
    ] = betterproto.message_field(3)
    timestamp: int = betterproto.uint32_field(4)


@dataclass
class CInventory_ModifyItems_RequestItemPropertyUpdate(betterproto.Message):
    itemid: int = betterproto.uint64_field(1)
    remove_property: bool = betterproto.bool_field(2)
    property_name: str = betterproto.string_field(3)
    property_value_bool: bool = betterproto.bool_field(4)
    property_value_int: int = betterproto.int64_field(5)
    property_value_string: str = betterproto.string_field(6)
    property_value_float: float = betterproto.float_field(7)


@dataclass
class CInventory_ConsumePlaytime_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    itemdefid: int = betterproto.uint64_field(2)


@dataclass
class CInventory_ConsumeItem_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    itemid: int = betterproto.uint64_field(2)
    quantity: int = betterproto.uint32_field(3)
    timestamp: str = betterproto.string_field(4)
    steamid: int = betterproto.uint64_field(5)
    requestid: int = betterproto.uint64_field(6)


@dataclass
class CInventory_DevSetNextDrop_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    itemdefid: int = betterproto.uint64_field(2)
    droptime: str = betterproto.string_field(3)


@dataclass
class CInventory_SplitItemStack_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    itemid: int = betterproto.uint64_field(2)
    quantity: int = betterproto.uint32_field(3)


@dataclass
class CInventory_CombineItemStacks_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    fromitemid: int = betterproto.uint64_field(2)
    destitemid: int = betterproto.uint64_field(3)
    quantity: int = betterproto.uint32_field(4)


@dataclass
class CInventory_GetItemDefMeta_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass
class CInventory_GetItemDefMeta_Response(betterproto.Message):
    modified: int = betterproto.uint32_field(1)
    digest: str = betterproto.string_field(2)


@dataclass
class CInventory_GetUserPurchaseInfo_Request(betterproto.Message):
    pass


@dataclass
class CInventory_GetUserPurchaseInfo_Response(betterproto.Message):
    ecurrency: int = betterproto.int32_field(1)


@dataclass
class CInventory_PurchaseInit_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    language: int = betterproto.int32_field(2)
    line_items: List[
        "CInventory_PurchaseInit_RequestLineItem"
    ] = betterproto.message_field(3)


@dataclass
class CInventory_PurchaseInit_RequestLineItem(betterproto.Message):
    itemdefid: int = betterproto.uint64_field(1)
    quantity: int = betterproto.uint32_field(2)


@dataclass
class CInventory_PurchaseInit_Response(betterproto.Message):
    orderid: int = betterproto.uint64_field(1)
    transid: int = betterproto.uint64_field(2)


@dataclass
class CInventory_PurchaseFinalize_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    language: int = betterproto.int32_field(2)
    orderid: int = betterproto.uint64_field(3)


@dataclass
class CInventoryClient_NewItems_Notification(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    inventory_response: "CInventory_Response" = betterproto.message_field(2)


class InventoryStub(betterproto.ServiceStub):
    async def get_inventory(
        self, *, appid: int = 0, steamid: int = 0
    ) -> CInventory_Response:
        request = CInventory_GetInventory_Request()
        request.appid = appid
        request.steamid = steamid

        return await self._unary_unary(
            "/.Inventory/GetInventory", request, CInventory_Response,
        )

    async def exchange_item(
        self,
        *,
        appid: int = 0,
        steamid: int = 0,
        materialsitemid: List[int] = [],
        materialsquantity: List[int] = [],
        outputitemdefid: int = 0,
    ) -> CInventory_Response:
        request = CInventory_ExchangeItem_Request()
        request.appid = appid
        request.steamid = steamid
        request.materialsitemid = materialsitemid
        request.materialsquantity = materialsquantity
        request.outputitemdefid = outputitemdefid

        return await self._unary_unary(
            "/.Inventory/ExchangeItem", request, CInventory_Response,
        )

    async def get_eligible_promo_item_def_i_ds(
        self, *, appid: int = 0, steamid: int = 0
    ) -> CInventory_GetEligiblePromoItemDefIDs_Response:
        request = CInventory_GetEligiblePromoItemDefIDs_Request()
        request.appid = appid
        request.steamid = steamid

        return await self._unary_unary(
            "/.Inventory/GetEligiblePromoItemDefIDs",
            request,
            CInventory_GetEligiblePromoItemDefIDs_Response,
        )

    async def add_promo_item(
        self,
        *,
        appid: int = 0,
        itemdefid: List[int] = [],
        itempropsjson: List[str] = [],
        steamid: int = 0,
        notify: bool = False,
        requestid: int = 0,
        trade_restriction: bool = False,
        is_purchase: bool = False,
    ) -> CInventory_Response:
        request = CInventory_AddItem_Request()
        request.appid = appid
        request.itemdefid = itemdefid
        request.itempropsjson = itempropsjson
        request.steamid = steamid
        request.notify = notify
        request.requestid = requestid
        request.trade_restriction = trade_restriction
        request.is_purchase = is_purchase

        return await self._unary_unary(
            "/.Inventory/AddPromoItem", request, CInventory_Response,
        )

    async def safe_modify_items(
        self,
        *,
        appid: int = 0,
        steamid: int = 0,
        updates: List["CInventory_ModifyItems_RequestItemPropertyUpdate"] = [],
        timestamp: int = 0,
    ) -> CInventory_Response:
        request = CInventory_ModifyItems_Request()
        request.appid = appid
        request.steamid = steamid
        if updates is not None:
            request.updates = updates
        request.timestamp = timestamp

        return await self._unary_unary(
            "/.Inventory/SafeModifyItems", request, CInventory_Response,
        )

    async def consume_playtime(
        self, *, appid: int = 0, itemdefid: int = 0
    ) -> CInventory_Response:
        request = CInventory_ConsumePlaytime_Request()
        request.appid = appid
        request.itemdefid = itemdefid

        return await self._unary_unary(
            "/.Inventory/ConsumePlaytime", request, CInventory_Response,
        )

    async def consume_item(
        self,
        *,
        appid: int = 0,
        itemid: int = 0,
        quantity: int = 0,
        timestamp: str = "",
        steamid: int = 0,
        requestid: int = 0,
    ) -> CInventory_Response:
        request = CInventory_ConsumeItem_Request()
        request.appid = appid
        request.itemid = itemid
        request.quantity = quantity
        request.timestamp = timestamp
        request.steamid = steamid
        request.requestid = requestid

        return await self._unary_unary(
            "/.Inventory/ConsumeItem", request, CInventory_Response,
        )

    async def dev_generate_item(
        self,
        *,
        appid: int = 0,
        itemdefid: List[int] = [],
        itempropsjson: List[str] = [],
        steamid: int = 0,
        notify: bool = False,
        requestid: int = 0,
        trade_restriction: bool = False,
        is_purchase: bool = False,
    ) -> CInventory_Response:
        request = CInventory_AddItem_Request()
        request.appid = appid
        request.itemdefid = itemdefid
        request.itempropsjson = itempropsjson
        request.steamid = steamid
        request.notify = notify
        request.requestid = requestid
        request.trade_restriction = trade_restriction
        request.is_purchase = is_purchase

        return await self._unary_unary(
            "/.Inventory/DevGenerateItem", request, CInventory_Response,
        )

    async def dev_set_next_drop(
        self, *, appid: int = 0, itemdefid: int = 0, droptime: str = ""
    ) -> CInventory_Response:
        request = CInventory_DevSetNextDrop_Request()
        request.appid = appid
        request.itemdefid = itemdefid
        request.droptime = droptime

        return await self._unary_unary(
            "/.Inventory/DevSetNextDrop", request, CInventory_Response,
        )

    async def split_item_stack(
        self, *, appid: int = 0, itemid: int = 0, quantity: int = 0
    ) -> CInventory_Response:
        request = CInventory_SplitItemStack_Request()
        request.appid = appid
        request.itemid = itemid
        request.quantity = quantity

        return await self._unary_unary(
            "/.Inventory/SplitItemStack", request, CInventory_Response,
        )

    async def combine_item_stacks(
        self,
        *,
        appid: int = 0,
        fromitemid: int = 0,
        destitemid: int = 0,
        quantity: int = 0,
    ) -> CInventory_Response:
        request = CInventory_CombineItemStacks_Request()
        request.appid = appid
        request.fromitemid = fromitemid
        request.destitemid = destitemid
        request.quantity = quantity

        return await self._unary_unary(
            "/.Inventory/CombineItemStacks", request, CInventory_Response,
        )

    async def get_item_def_meta(
        self, *, appid: int = 0
    ) -> CInventory_GetItemDefMeta_Response:
        request = CInventory_GetItemDefMeta_Request()
        request.appid = appid

        return await self._unary_unary(
            "/.Inventory/GetItemDefMeta", request, CInventory_GetItemDefMeta_Response,
        )

    async def get_user_purchase_info(self) -> CInventory_GetUserPurchaseInfo_Response:
        request = CInventory_GetUserPurchaseInfo_Request()

        return await self._unary_unary(
            "/.Inventory/GetUserPurchaseInfo",
            request,
            CInventory_GetUserPurchaseInfo_Response,
        )

    async def purchase_init(
        self,
        *,
        appid: int = 0,
        language: int = 0,
        line_items: List["CInventory_PurchaseInit_RequestLineItem"] = [],
    ) -> CInventory_PurchaseInit_Response:
        request = CInventory_PurchaseInit_Request()
        request.appid = appid
        request.language = language
        if line_items is not None:
            request.line_items = line_items

        return await self._unary_unary(
            "/.Inventory/PurchaseInit", request, CInventory_PurchaseInit_Response,
        )

    async def purchase_finalize(
        self, *, appid: int = 0, language: int = 0, orderid: int = 0
    ) -> CInventory_Response:
        request = CInventory_PurchaseFinalize_Request()
        request.appid = appid
        request.language = language
        request.orderid = orderid

        return await self._unary_unary(
            "/.Inventory/PurchaseFinalize", request, CInventory_Response,
        )


class InventoryClientStub(betterproto.ServiceStub):
    async def notify_new_items(
        self,
        *,
        appid: int = 0,
        inventory_response: Optional["CInventory_Response"] = None,
    ) -> NoResponse:
        request = CInventoryClient_NewItems_Notification()
        request.appid = appid
        if inventory_response is not None:
            request.inventory_response = inventory_response

        return await self._unary_unary(
            "/.InventoryClient/NotifyNewItems", request, NoResponse,
        )
