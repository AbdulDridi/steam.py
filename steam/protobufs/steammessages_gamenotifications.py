# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_gamenotifications.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List, Optional

import betterproto

from .steammessages_unified_base import NoResponse


@dataclass
class CGameNotifications_Variable(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class CGameNotifications_LocalizedText(betterproto.Message):
    token: str = betterproto.string_field(1)
    variables: List["CGameNotifications_Variable"] = betterproto.message_field(2)
    rendered_text: str = betterproto.string_field(3)


@dataclass
class CGameNotifications_UserStatus(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    state: str = betterproto.string_field(2)
    title: "CGameNotifications_LocalizedText" = betterproto.message_field(3)
    message: "CGameNotifications_LocalizedText" = betterproto.message_field(4)


@dataclass
class CGameNotifications_CreateSession_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    context: int = betterproto.uint64_field(2)
    title: "CGameNotifications_LocalizedText" = betterproto.message_field(3)
    users: List["CGameNotifications_UserStatus"] = betterproto.message_field(4)
    steamid: float = betterproto.fixed64_field(5)


@dataclass
class CGameNotifications_CreateSession_Response(betterproto.Message):
    sessionid: int = betterproto.uint64_field(1)


@dataclass
class CGameNotifications_DeleteSession_Request(betterproto.Message):
    sessionid: int = betterproto.uint64_field(1)
    appid: int = betterproto.uint32_field(2)
    steamid: float = betterproto.fixed64_field(3)


@dataclass
class CGameNotifications_DeleteSession_Response(betterproto.Message):
    pass


@dataclass
class CGameNotifications_UpdateSession_Request(betterproto.Message):
    sessionid: int = betterproto.uint64_field(1)
    appid: int = betterproto.uint32_field(2)
    title: "CGameNotifications_LocalizedText" = betterproto.message_field(3)
    users: List["CGameNotifications_UserStatus"] = betterproto.message_field(4)
    steamid: float = betterproto.fixed64_field(6)


@dataclass
class CGameNotifications_UpdateSession_Response(betterproto.Message):
    pass


@dataclass
class CGameNotifications_EnumerateSessions_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    include_all_user_messages: bool = betterproto.bool_field(3)
    include_auth_user_message: bool = betterproto.bool_field(4)
    language: str = betterproto.string_field(5)


@dataclass
class CGameNotifications_Session(betterproto.Message):
    sessionid: int = betterproto.uint64_field(1)
    appid: int = betterproto.uint64_field(2)
    context: int = betterproto.uint64_field(3)
    title: "CGameNotifications_LocalizedText" = betterproto.message_field(4)
    time_created: int = betterproto.uint32_field(5)
    time_updated: int = betterproto.uint32_field(6)
    user_status: List["CGameNotifications_UserStatus"] = betterproto.message_field(7)


@dataclass
class CGameNotifications_EnumerateSessions_Response(betterproto.Message):
    sessions: List["CGameNotifications_Session"] = betterproto.message_field(1)


@dataclass
class CGameNotifications_GetSessionDetails_Request(betterproto.Message):
    sessions: List[
        "CGameNotifications_GetSessionDetails_RequestRequestedSession"
    ] = betterproto.message_field(1)
    appid: int = betterproto.uint32_field(2)
    language: str = betterproto.string_field(3)


@dataclass
class CGameNotifications_GetSessionDetails_RequestRequestedSession(betterproto.Message):
    sessionid: int = betterproto.uint64_field(1)
    include_auth_user_message: bool = betterproto.bool_field(3)


@dataclass
class CGameNotifications_GetSessionDetails_Response(betterproto.Message):
    sessions: List["CGameNotifications_Session"] = betterproto.message_field(1)


@dataclass
class GameNotificationSettings(betterproto.Message):
    appid: int = betterproto.uint32_field(1)
    allow_notifications: bool = betterproto.bool_field(2)


@dataclass
class CGameNotifications_UpdateNotificationSettings_Request(betterproto.Message):
    game_notification_settings: List[
        "GameNotificationSettings"
    ] = betterproto.message_field(1)


@dataclass
class CGameNotifications_UpdateNotificationSettings_Response(betterproto.Message):
    pass


@dataclass
class CGameNotifications_OnNotificationsRequested_Notification(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    appid: int = betterproto.uint32_field(2)


@dataclass
class CGameNotifications_OnUserStatusChanged_Notification(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    sessionid: int = betterproto.uint64_field(2)
    appid: int = betterproto.uint32_field(3)
    status: "CGameNotifications_UserStatus" = betterproto.message_field(4)
    removed: bool = betterproto.bool_field(5)


class GameNotificationsStub(betterproto.ServiceStub):
    async def user_create_session(
        self,
        *,
        appid: int = 0,
        context: int = 0,
        title: Optional["CGameNotifications_LocalizedText"] = None,
        users: List["CGameNotifications_UserStatus"] = [],
        steamid: float = 0,
    ) -> CGameNotifications_CreateSession_Response:
        request = CGameNotifications_CreateSession_Request()
        request.appid = appid
        request.context = context
        if title is not None:
            request.title = title
        if users is not None:
            request.users = users
        request.steamid = steamid

        return await self._unary_unary(
            "/.GameNotifications/UserCreateSession",
            request,
            CGameNotifications_CreateSession_Response,
        )

    async def user_delete_session(
        self, *, sessionid: int = 0, appid: int = 0, steamid: float = 0
    ) -> CGameNotifications_DeleteSession_Response:
        request = CGameNotifications_DeleteSession_Request()
        request.sessionid = sessionid
        request.appid = appid
        request.steamid = steamid

        return await self._unary_unary(
            "/.GameNotifications/UserDeleteSession",
            request,
            CGameNotifications_DeleteSession_Response,
        )

    async def user_update_session(
        self,
        *,
        sessionid: int = 0,
        appid: int = 0,
        title: Optional["CGameNotifications_LocalizedText"] = None,
        users: List["CGameNotifications_UserStatus"] = [],
        steamid: float = 0,
    ) -> CGameNotifications_UpdateSession_Response:
        request = CGameNotifications_UpdateSession_Request()
        request.sessionid = sessionid
        request.appid = appid
        if title is not None:
            request.title = title
        if users is not None:
            request.users = users
        request.steamid = steamid

        return await self._unary_unary(
            "/.GameNotifications/UserUpdateSession",
            request,
            CGameNotifications_UpdateSession_Response,
        )

    async def enumerate_sessions(
        self,
        *,
        appid: int = 0,
        include_all_user_messages: bool = False,
        include_auth_user_message: bool = False,
        language: str = "",
    ) -> CGameNotifications_EnumerateSessions_Response:
        request = CGameNotifications_EnumerateSessions_Request()
        request.appid = appid
        request.include_all_user_messages = include_all_user_messages
        request.include_auth_user_message = include_auth_user_message
        request.language = language

        return await self._unary_unary(
            "/.GameNotifications/EnumerateSessions",
            request,
            CGameNotifications_EnumerateSessions_Response,
        )

    async def get_session_details(
        self,
        *,
        sessions: List[
            "CGameNotifications_GetSessionDetails_RequestRequestedSession"
        ] = [],
        appid: int = 0,
        language: str = "",
    ) -> CGameNotifications_GetSessionDetails_Response:
        request = CGameNotifications_GetSessionDetails_Request()
        if sessions is not None:
            request.sessions = sessions
        request.appid = appid
        request.language = language

        return await self._unary_unary(
            "/.GameNotifications/GetSessionDetails",
            request,
            CGameNotifications_GetSessionDetails_Response,
        )

    async def update_notification_settings(
        self, *, game_notification_settings: List["GameNotificationSettings"] = []
    ) -> CGameNotifications_UpdateNotificationSettings_Response:
        request = CGameNotifications_UpdateNotificationSettings_Request()
        if game_notification_settings is not None:
            request.game_notification_settings = game_notification_settings

        return await self._unary_unary(
            "/.GameNotifications/UpdateNotificationSettings",
            request,
            CGameNotifications_UpdateNotificationSettings_Response,
        )


class GameNotificationsClientStub(betterproto.ServiceStub):
    async def on_notifications_requested(
        self, *, steamid: float = 0, appid: int = 0
    ) -> NoResponse:
        request = CGameNotifications_OnNotificationsRequested_Notification()
        request.steamid = steamid
        request.appid = appid

        return await self._unary_unary(
            "/.GameNotificationsClient/OnNotificationsRequested", request, NoResponse,
        )

    async def on_user_status_changed(
        self,
        *,
        steamid: float = 0,
        sessionid: int = 0,
        appid: int = 0,
        status: Optional["CGameNotifications_UserStatus"] = None,
        removed: bool = False,
    ) -> NoResponse:
        request = CGameNotifications_OnUserStatusChanged_Notification()
        request.steamid = steamid
        request.sessionid = sessionid
        request.appid = appid
        if status is not None:
            request.status = status
        request.removed = removed

        return await self._unary_unary(
            "/.GameNotificationsClient/OnUserStatusChanged", request, NoResponse,
        )
