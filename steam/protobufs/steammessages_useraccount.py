# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: steammessages_useraccount.proto
# plugin: python-betterproto

from dataclasses import dataclass
from typing import List

import betterproto


class EInternalAccountType(betterproto.Enum):
    k_EInternalSteamAccountType = 1
    k_EInternalClanType = 2
    k_EInternalAppType = 3
    k_EInternalBroadcastChannelType = 4


class EExternalAccountType(betterproto.Enum):
    k_EExternalNone = 0
    k_EExternalSteamAccount = 1
    k_EExternalGoogleAccount = 2
    k_EExternalFacebookAccount = 3
    k_EExternalTwitterAccount = 4
    k_EExternalTwitchAccount = 5
    k_EExternalYouTubeChannelAccount = 6
    k_EExternalFacebookPage = 7


@dataclass
class CUserAccount_GetAvailableValveDiscountPromotions_Request(betterproto.Message):
    country_code: str = betterproto.string_field(1)


@dataclass
class CUserAccount_GetAvailableValveDiscountPromotions_Response(betterproto.Message):
    promotions: List[
        "CUserAccount_GetAvailableValveDiscountPromotions_ResponseValveDiscountPromotionDetails"
    ] = betterproto.message_field(1)


@dataclass
class CUserAccount_GetAvailableValveDiscountPromotions_ResponseValveDiscountPromotionDetails(
    betterproto.Message
):
    promotionid: int = betterproto.uint32_field(1)
    promotion_description: str = betterproto.string_field(2)
    minimum_cart_amount: int = betterproto.int64_field(3)
    minimum_cart_amount_for_display: int = betterproto.int64_field(4)
    discount_amount: int = betterproto.int64_field(5)
    currency_code: int = betterproto.int32_field(6)
    available_use_count: int = betterproto.int32_field(7)
    promotional_discount_type: int = betterproto.int32_field(8)
    loyalty_reward_id: int = betterproto.int32_field(9)


@dataclass
class CUserAccount_GetAccountLinkStatus_Request(betterproto.Message):
    pass


@dataclass
class CUserAccount_GetAccountLinkStatus_Response(betterproto.Message):
    pwid: int = betterproto.uint32_field(1)
    identity_verification: int = betterproto.uint32_field(2)


@dataclass
class CUserAccount_CancelLicenseForApp_Request(betterproto.Message):
    appid: int = betterproto.uint32_field(1)


@dataclass
class CUserAccount_CancelLicenseForApp_Response(betterproto.Message):
    pass


@dataclass
class CUserAccount_CreateFriendInviteToken_Request(betterproto.Message):
    invite_limit: int = betterproto.uint32_field(1)
    invite_duration: int = betterproto.uint32_field(2)
    invite_note: str = betterproto.string_field(3)


@dataclass
class CUserAccount_CreateFriendInviteToken_Response(betterproto.Message):
    invite_token: str = betterproto.string_field(1)
    invite_limit: int = betterproto.uint64_field(2)
    invite_duration: int = betterproto.uint64_field(3)
    time_created: float = betterproto.fixed32_field(4)
    valid: bool = betterproto.bool_field(5)


@dataclass
class CUserAccount_GetFriendInviteTokens_Request(betterproto.Message):
    pass


@dataclass
class CUserAccount_GetFriendInviteTokens_Response(betterproto.Message):
    tokens: List[
        "CUserAccount_CreateFriendInviteToken_Response"
    ] = betterproto.message_field(1)


@dataclass
class CUserAccount_ViewFriendInviteToken_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    invite_token: str = betterproto.string_field(2)


@dataclass
class CUserAccount_ViewFriendInviteToken_Response(betterproto.Message):
    valid: bool = betterproto.bool_field(1)
    steamid: int = betterproto.uint64_field(2)
    invite_duration: int = betterproto.uint64_field(3)


@dataclass
class CUserAccount_RedeemFriendInviteToken_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    invite_token: str = betterproto.string_field(2)


@dataclass
class CUserAccount_RedeemFriendInviteToken_Response(betterproto.Message):
    pass


@dataclass
class CUserAccount_RevokeFriendInviteToken_Request(betterproto.Message):
    invite_token: str = betterproto.string_field(1)


@dataclass
class CUserAccount_RevokeFriendInviteToken_Response(betterproto.Message):
    pass


@dataclass
class CUserAccount_RegisterCompatTool_Request(betterproto.Message):
    compat_tool: int = betterproto.uint32_field(1)


@dataclass
class CUserAccount_RegisterCompatTool_Response(betterproto.Message):
    pass


@dataclass
class CAccountLinking_GetLinkedAccountInfo_Request(betterproto.Message):
    account_type: "EInternalAccountType" = betterproto.enum_field(1)
    account_id: int = betterproto.uint64_field(2)
    filter: "EExternalAccountType" = betterproto.enum_field(3)
    return_access_token: bool = betterproto.bool_field(4)


@dataclass
class CAccountLinking_GetLinkedAccountInfo_Response(betterproto.Message):
    external_accounts: List[
        "CAccountLinking_GetLinkedAccountInfo_ResponseCExternalAccountTuple_Response"
    ] = betterproto.message_field(1)


@dataclass
class CAccountLinking_GetLinkedAccountInfo_ResponseCExternalAccountTuple_Response(
    betterproto.Message
):
    external_type: "EExternalAccountType" = betterproto.enum_field(1)
    external_id: str = betterproto.string_field(2)
    external_user_name: str = betterproto.string_field(3)
    external_url: str = betterproto.string_field(4)
    access_token: str = betterproto.string_field(5)
    access_token_secret: str = betterproto.string_field(6)
    is_valid: bool = betterproto.bool_field(7)


@dataclass
class CEmbeddedClient_AuthorizeCurrentDevice_Request(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    appid: int = betterproto.uint32_field(2)
    device_info: str = betterproto.string_field(3)
    deviceid: int = betterproto.uint32_field(4)


@dataclass
class CEmbeddedClient_Token(betterproto.Message):
    steamid: float = betterproto.fixed64_field(1)
    client_token: bytes = betterproto.bytes_field(2)
    expiry: int = betterproto.uint32_field(3)
    deviceid: int = betterproto.uint32_field(4)


@dataclass
class CEmbeddedClient_AuthorizeDevice_Response(betterproto.Message):
    result: int = betterproto.uint32_field(1)
    token: "CEmbeddedClient_Token" = betterproto.message_field(2)


class UserAccountStub(betterproto.ServiceStub):
    async def get_available_valve_discount_promotions(
        self, *, country_code: str = ""
    ) -> CUserAccount_GetAvailableValveDiscountPromotions_Response:
        request = CUserAccount_GetAvailableValveDiscountPromotions_Request()
        request.country_code = country_code

        return await self._unary_unary(
            "/.UserAccount/GetAvailableValveDiscountPromotions",
            request,
            CUserAccount_GetAvailableValveDiscountPromotions_Response,
        )

    async def get_account_link_status(
        self,
    ) -> CUserAccount_GetAccountLinkStatus_Response:
        request = CUserAccount_GetAccountLinkStatus_Request()

        return await self._unary_unary(
            "/.UserAccount/GetAccountLinkStatus",
            request,
            CUserAccount_GetAccountLinkStatus_Response,
        )

    async def cancel_license_for_app(
        self, *, appid: int = 0
    ) -> CUserAccount_CancelLicenseForApp_Response:
        request = CUserAccount_CancelLicenseForApp_Request()
        request.appid = appid

        return await self._unary_unary(
            "/.UserAccount/CancelLicenseForApp",
            request,
            CUserAccount_CancelLicenseForApp_Response,
        )

    async def create_friend_invite_token(
        self, *, invite_limit: int = 0, invite_duration: int = 0, invite_note: str = ""
    ) -> CUserAccount_CreateFriendInviteToken_Response:
        request = CUserAccount_CreateFriendInviteToken_Request()
        request.invite_limit = invite_limit
        request.invite_duration = invite_duration
        request.invite_note = invite_note

        return await self._unary_unary(
            "/.UserAccount/CreateFriendInviteToken",
            request,
            CUserAccount_CreateFriendInviteToken_Response,
        )

    async def get_friend_invite_tokens(
        self,
    ) -> CUserAccount_GetFriendInviteTokens_Response:
        request = CUserAccount_GetFriendInviteTokens_Request()

        return await self._unary_unary(
            "/.UserAccount/GetFriendInviteTokens",
            request,
            CUserAccount_GetFriendInviteTokens_Response,
        )

    async def view_friend_invite_token(
        self, *, steamid: float = 0, invite_token: str = ""
    ) -> CUserAccount_ViewFriendInviteToken_Response:
        request = CUserAccount_ViewFriendInviteToken_Request()
        request.steamid = steamid
        request.invite_token = invite_token

        return await self._unary_unary(
            "/.UserAccount/ViewFriendInviteToken",
            request,
            CUserAccount_ViewFriendInviteToken_Response,
        )

    async def redeem_friend_invite_token(
        self, *, steamid: float = 0, invite_token: str = ""
    ) -> CUserAccount_RedeemFriendInviteToken_Response:
        request = CUserAccount_RedeemFriendInviteToken_Request()
        request.steamid = steamid
        request.invite_token = invite_token

        return await self._unary_unary(
            "/.UserAccount/RedeemFriendInviteToken",
            request,
            CUserAccount_RedeemFriendInviteToken_Response,
        )

    async def revoke_friend_invite_token(
        self, *, invite_token: str = ""
    ) -> CUserAccount_RevokeFriendInviteToken_Response:
        request = CUserAccount_RevokeFriendInviteToken_Request()
        request.invite_token = invite_token

        return await self._unary_unary(
            "/.UserAccount/RevokeFriendInviteToken",
            request,
            CUserAccount_RevokeFriendInviteToken_Response,
        )

    async def register_compat_tool(
        self, *, compat_tool: int = 0
    ) -> CUserAccount_RegisterCompatTool_Response:
        request = CUserAccount_RegisterCompatTool_Request()
        request.compat_tool = compat_tool

        return await self._unary_unary(
            "/.UserAccount/RegisterCompatTool",
            request,
            CUserAccount_RegisterCompatTool_Response,
        )


class AccountLinkingStub(betterproto.ServiceStub):
    async def get_linked_account_info(
        self,
        *,
        account_type: "EInternalAccountType" = 0,
        account_id: int = 0,
        filter: "EExternalAccountType" = 0,
        return_access_token: bool = False,
    ) -> CAccountLinking_GetLinkedAccountInfo_Response:
        request = CAccountLinking_GetLinkedAccountInfo_Request()
        request.account_type = account_type
        request.account_id = account_id
        request.filter = filter
        request.return_access_token = return_access_token

        return await self._unary_unary(
            "/.AccountLinking/GetLinkedAccountInfo",
            request,
            CAccountLinking_GetLinkedAccountInfo_Response,
        )


class EmbeddedClientStub(betterproto.ServiceStub):
    async def authorize_current_device(
        self,
        *,
        steamid: float = 0,
        appid: int = 0,
        device_info: str = "",
        deviceid: int = 0,
    ) -> CEmbeddedClient_AuthorizeDevice_Response:
        request = CEmbeddedClient_AuthorizeCurrentDevice_Request()
        request.steamid = steamid
        request.appid = appid
        request.device_info = device_info
        request.deviceid = deviceid

        return await self._unary_unary(
            "/.EmbeddedClient/AuthorizeCurrentDevice",
            request,
            CEmbeddedClient_AuthorizeDevice_Response,
        )
